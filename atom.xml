<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Evan-Lam&#39;s Blog</title>
  
  <subtitle>持之以恒，契而不舍</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liangyunfeng.github.io/"/>
  <updated>2018-05-23T10:35:36.755Z</updated>
  <id>https://liangyunfeng.github.io/</id>
  
  <author>
    <name>Evan-Lam</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>多分辨率适配总结</title>
    <link href="https://liangyunfeng.github.io/2018/01/07/%E5%A4%9A%E5%88%86%E8%BE%A8%E7%8E%87%E9%80%82%E9%85%8D%E6%80%BB%E7%BB%93/"/>
    <id>https://liangyunfeng.github.io/2018/01/07/多分辨率适配总结/</id>
    <published>2018-01-07T06:41:21.000Z</published>
    <updated>2018-05-23T10:35:36.755Z</updated>
    
    <content type="html"><![CDATA[<p><strong>sw360dp :</strong><br>sw表示smallest screen width, 设备使用比设备本身小最接近的文件夹。比如一个设备最小的屏幕宽度是380dp,现在有sw360dp文件夹和sw411dp文件夹，那么会使用哪个文件夹的资源？会使用sw360dp的，因为sw411dp要求最小屏幕宽度是411dp，你的设备最小屏幕宽度是360dp，那么大于360dp并且小于411dp这部分的布局就不够空间显示。</p><p><strong>xhdpi:</strong><br>如果设备是xhdpi，现在有hdpi文件夹和xxhdpi的资源，它会使用哪个文件夹的资源呢？会使用xxhdpi的，因为使用更好分辨率的资源，可以把它按比例压缩到小分辨率的资源而不会失真，如果使用hdpi的资源，需要把它进行按比例拉伸到合适的大小才能使用。</p><p>最清晰的Android多屏幕适配方案<br><a href="http://blog.csdn.net/shimiso/article/details/52061376#t0" target="_blank" rel="noopener">http://blog.csdn.net/shimiso/article/details/52061376#t0</a></p><ol><li><p>使用dp单位</p></li><li><p>在需要适配的地方使用引用，在不同的最小屏幕和像素密度的文件夹里面创建一份对应的尺寸。例如: mdpi, hdpi, xhdpi, xxhdpi, xxxhdpi, sw320dp-hdpi, sw320dp-xxhdpi, sw360dp-hdpi, sw411dp-xxhdpi, w360dp, h360dp, values-480x320, values-854x480, values-1920x1080, values-v11, values-v14, values-24等等。</p></li><li><p>selector, layer-list, shape, vector, animated-vector, path标签等xml文件放在drawable文件夹。可以使用这些创建的图形，最好不用图片资源。<br>selector:  <a href="http://blog.csdn.net/jiankeufo/article/details/73845750?from=singlemessage" target="_blank" rel="noopener">http://blog.csdn.net/jiankeufo/article/details/73845750?from=singlemessage</a><br>shape:  <a href="https://www.cnblogs.com/popfisher/p/6238119.html" target="_blank" rel="noopener">https://www.cnblogs.com/popfisher/p/6238119.html</a></p></li><li><p>图片资源创建一套放在drawable-xxhdpi，Android系统会根据设备的分辨率来自动缩放适配，不用为不同分辨率的设备创建多套图片资源，以达到减少apk大小。</p></li><li><p>使用.9文件(nine-patch)图片，可以满足特殊拉伸图片的情况。这样就不用为每种分辨率创建一套图片资源。</p></li><li><p>在代码中动态需要使用像素px单位的地方，可以通过设备密度来计算 px = (int)(density * dp) + 0.5 来计算出来。tip:这里加0.5是为了四舍五入的作用。</p></li><li><p>对于字体大小使用sp, dp的区别:   </p><ul><li>当修改系统字体大小时，字体大小以dp为单位时，大小不变；</li><li><p>当修改系统字体大小时，字体大小以sp为单位时，大小跟随变化；<br>dp:<br>dp是一种密度无关像素，对应于 160dpi 下像素的物理尺寸<br>sp:<br>sp是和dp相同的基本单位，但它会按用户首选的文本尺寸进行缩放（属于缩放无关像素） </p><p>从源代码注释可以看到：<br>scaledDensity会收到用户配置的影响，而density不会.<br>这也就是为什么设置sp单位时字体大小会受到用户配置系统字体的影响.</p></li></ul></li><li><p>Android中dp,px,sp概念梳理以及如何做到屏幕适配<br><a href="http://blog.csdn.net/jiangwei0910410003/article/details/40509571" target="_blank" rel="noopener">http://blog.csdn.net/jiangwei0910410003/article/details/40509571</a><br><a href="https://www.jianshu.com/p/23324a57352d" target="_blank" rel="noopener">https://www.jianshu.com/p/23324a57352d</a></p></li><li><p>| 密度类型 | 代表的分辨率（px） | 屏幕像素密度（dpi）|<br>| - | :-: | -: |<br>| 低密度（ldpi） | 240x320 | 120 |<br>| 中密度（mdpi） | 320x480 | 160 |<br>| 高密度（hdpi） | 480x800 | 240|<br>| 超高密度（xhdpi） | 720x1280 | 320|<br>| 超超高密度（xxhdpi） | 1080x1920 | 480 |  </p> <img src="/2018/01/07/多分辨率适配总结/dpi_times.jpg" title="Image"><p> 屏幕尺寸、分辨率、像素密度三者关系 </p><p> 一部手机的分辨率是宽x高，屏幕大小是以寸为单位，那么三者的关系是： </p> <img src="/2018/01/07/多分辨率适配总结/dpi_cal.png" title="Image"><p> Android 屏幕适配：最全面的解决方案:<br> <a href="https://www.jianshu.com/p/ec5a1a30694b" target="_blank" rel="noopener">https://www.jianshu.com/p/ec5a1a30694b</a>  </p></li><li><p>使得布局元素自适应屏幕尺寸<br>使用相对布局（RelativeLayout），禁用绝对布局（AbsoluteLayout）<br>开发中，我们使用的布局一般有：<br>线性布局（Linearlayout）<br>相对布局（RelativeLayout）<br>帧布局（FrameLayout）<br>绝对布局（AbsoluteLayout）<br>用”wrap_content”、”match_parent”和”weight“来控制视图组件的宽度和高度  </p></li><li><p>常用图标规范尺寸:<br>L DPI ( Low Density Screen，120 DPI )，其图标大小为 36 x 36 px<br>M DPI ( Medium Density Screen, 160 DPI )，其图标大小为 48 x 48 px<br>H DPI ( High Density Screen, 240 DPI )，其图标大小为 72 x 72 px<br>XH DPI ( Extra-high density screen, 320 DPI )，其图标大小为 96 x 96 px<br>XXH DPI( xx-high density screen, 480 DPI )，其图标大小为144 x 144 px<br>XXXH DPI( xxx-high density screen, 640 DPI )，其图标大小为192 x 192 px<br><a href="http://blog.csdn.net/ys743276112/article/details/51910874" target="_blank" rel="noopener">http://blog.csdn.net/ys743276112/article/details/51910874</a> </p></li><li><p>注意小数点强制转换后的精确度降低导致的显示问题。例如: 前面几个布局的高度都四舍五入相加后，总高度的和可能会少了两三个像素px单位。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;sw360dp :&lt;/strong&gt;&lt;br&gt;sw表示smallest screen width, 设备使用比设备本身小最接近的文件夹。比如一个设备最小的屏幕宽度是380dp,现在有sw360dp文件夹和sw411dp文件夹，那么会使用哪个文件夹的资源？会使用
      
    
    </summary>
    
      <category term="Android" scheme="https://liangyunfeng.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://liangyunfeng.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令</title>
    <link href="https://liangyunfeng.github.io/2017/05/08/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://liangyunfeng.github.io/2017/05/08/Git常用命令/</id>
    <published>2017-05-08T14:56:19.000Z</published>
    <updated>2018-05-23T14:36:31.834Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h1><p><strong>全局设置</strong></p><p>a. 设置用户信息  </p><pre><code>$ git config --global user.name &quot;Your Name&quot;  $ git config --global user.email &quot;email@example.com&quot;</code></pre><p>b. 设置编辑器  </p><pre><code>$ git config --global core.editor emacs</code></pre><p>c. 设置差异比较器  </p><pre><code>$ git config --global merge.tool vimdiff</code></pre><p>d. 设置显示不同的颜色</p><pre><code>$ git config --global color.ui true</code></pre><p>e. 查看全局设置信息  </p><pre><code>$ git config --global -l</code></pre><p><strong>SSH Key设置</strong></p><p>a. 生成SSH key  </p><pre><code>$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code></pre><p>b. 复制id_rsa.pub内容到粘贴板中  </p><pre><code>$ cat ~/.ssh/id_rsa.pub</code></pre><p>c. 登陆Github &gt; 设置 &gt; SSH and GPG Keys &gt; new SSH key  </p><p>d. 复制粘贴板中的内容到key文本编辑框中  </p><p>e. 点击Add SHH key按钮  </p><p>f. 查看是否设置SSH成功  </p><pre><code>$ ssh [-p port] git@github.com</code></pre><p><strong>创建仓库</strong></p><p>a. 进入需要创建仓库的目录  </p><pre><code>$ mkdir studygit$ cd studygit$ pwd/Users/username/studygit</code></pre><p>b. 在当前目录创建仓库  </p><pre><code>$ git init</code></pre><p><strong>添加远程库</strong></p><p>a. 把一个已有的本地仓库与远程仓库关联   </p><pre><code>$ git remote add origin git@github.com:liangyunfeng/git.study.git</code></pre><p>b. 本地库的所有内容推送到远程库上  </p><blockquote><p>由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。  </p></blockquote><pre><code>$ git push -u origin master</code></pre><p>c. 之后推送本地库到远程库上使用  </p><pre><code>$ git push origin master</code></pre><p><strong>把文件添加到暂存区</strong>  </p><pre><code>$ git add readme.txt</code></pre><p><strong>把文件添加到版本库</strong>  </p><pre><code>$ git commit -m &quot;wrote a readme file&quot;</code></pre><p><strong>查看仓库的当前状态</strong>  </p><pre><code>$ git status</code></pre><p><strong>查看修改内容</strong></p><pre><code>$ git diff readme.txt </code></pre><p><strong>查看提交历史</strong>  </p><pre><code>$ git log</code></pre><p><strong>查看命令历史</strong></p><pre><code>$ git reflog</code></pre><p><strong>版本回退</strong>  </p><pre><code>$ git reset --hard commit_id $ git reset --hard HEAD &lt;filename&gt;$ git reset --hard HEAD^^$ git reset --hard HEAD~2</code></pre><p><strong>撤销修改</strong>  </p><pre><code>$ git checkout -- file</code></pre><blockquote><p>命令git checkout – file意思就是，把file文件在工作区的修改全部撤销，这里有两种情况：<br>一种是file自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；<br>一种是filet已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p></blockquote><p><strong>把暂存区的修改撤销掉（unstage），重新放回工作区</strong></p><pre><code>$ git reset HEAD &lt;file&gt;</code></pre><blockquote><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout – file。<br>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。<br>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退git reset –hard commit_id，不过前提是没有推送到远程库。</file></p></blockquote><p><strong>删除文件</strong></p><pre><code>$ git rm test.txt$ git commit -m &quot;description&quot;</code></pre><p><strong>工作区误删文件，恢复到版本库最新版本</strong></p><pre><code>$ git checkout -- file</code></pre><p><strong>关联远程库</strong></p><pre><code>$ git remote add origin git@server-name:path/repo-name.git</code></pre><p><strong>关联后，第一次推送master分支的所有内容</strong></p><pre><code>$ git push -u origin master</code></pre><p><strong>此后，提交到远程库</strong></p><pre><code>$ git push origin master</code></pre><p><strong>从远程库克隆</strong></p><pre><code>$ git clone git@server-name:path/repo-name.git</code></pre><p><strong>创建分支</strong></p><pre><code>$ git branch &lt;name&gt;</code></pre><p><strong>切换分支</strong></p><pre><code>$ git checkout &lt;name&gt;</code></pre><p><strong>查看分支</strong></p><pre><code>$ git branch</code></pre><p><strong>创建+切换分支</strong></p><pre><code>$ git checkout -b &lt;name&gt;</code></pre><p><strong>合并某分支到当前分支</strong></p><pre><code>$ git merge &lt;name&gt;</code></pre><p><strong>删除分支</strong></p><pre><code>$ git branch -d &lt;name&gt;</code></pre><p><strong>解决冲突</strong></p><blockquote><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。<br>  解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。</p></blockquote><p><strong>查看分支合并图</strong></p><pre><code>$ git log --graph</code></pre><p><strong>普通模式合并某分支到当前分支</strong></p><pre><code>$ git merge --no-ff -m &quot;merge with no-ff&quot; &lt;name&gt;</code></pre><blockquote><p>合并分支时，加上–no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。</p></blockquote><p><strong>工作现场隐藏</strong></p><pre><code>$ git stash</code></pre><p><strong>查看工作现场</strong></p><pre><code>$ git stash list</code></pre><p><strong>工作现场恢复但不删除工作现场</strong></p><pre><code>$ git stash apply [stash@{0}]</code></pre><p><strong>工作现场恢复并删除工作现场</strong></p><pre><code>$ git stash pop</code></pre><p><strong>查看远程库信息</strong></p><pre><code>$ git remote</code></pre><p><strong>查看远程库详细信息</strong></p><pre><code>$ git remote -v</code></pre><p><strong>从本地推送分支</strong></p><pre><code>$ git push origin branch-name</code></pre><blockquote><p>从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；</p></blockquote><p><strong>在本地创建和远程分支对应的分支</strong></p><pre><code>$ git checkout -b branch-name origin/branch-name</code></pre><p><strong>建立本地分支和远程分支的关联</strong></p><pre><code>$ git branch --set-upstream branch-name origin/branch-name</code></pre><p><strong>从远程抓取分支</strong></p><pre><code>$ git pull</code></pre><blockquote><p>从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。</p></blockquote><p><strong>关联远程库</strong></p><pre><code>$ git remote add &lt;name&gt; git@github.com:liangyunfeng/git.study.git</code></pre><p><strong>远程库重命名</strong></p><pre><code>$ git remote rename &lt;oldname&gt; &lt;newname&gt;</code></pre><p><strong>删除远程库</strong></p><pre><code>$ git remote rm &lt;name&gt;</code></pre><p><strong>重新设置基线</strong></p><pre><code>$ git rebase</code></pre><blockquote><p>原理很简单：rebase需要基于一个分支来设置你当前的分支的基线，这基线就是当前分支的开始时间轴向后移动到最新的跟踪分支的最后面，这样你的当前分支就    是最新的跟踪分支。这里的操作是基于文件事务处理的，所以你不用怕中间失败会影响文件的一致性。在中间的过程中你可以随时取消rebase 事务。git rebase –abort</p><p>git rebase其实可以把它理解成是“重新设置基线”，将你的当前分支重新设置开始点。这个时候才能知道你当前分支于你需要比较的分支之间的差异。</p></blockquote><p><strong>创建标签</strong></p><pre><code>$ git tag &lt;tagname&gt; [commitid]</code></pre><blockquote><p>可以指定commitid，默认为HEAD</p></blockquote><pre><code>git tag -a &lt;tagname&gt; -m &quot;decription&quot; [commitid]</code></pre><blockquote><p>创建带有说明的标签，用-a指定标签名，-m指定说明文字</p></blockquote><p><strong>查看标签</strong></p><pre><code>$ git tag</code></pre><p><strong>看标签信息</strong></p><pre><code>$ git show &lt;tagname&gt;</code></pre><p><strong> 删除标签</strong></p><pre><code>$ git tag -d &lt;tagname&gt;</code></pre><p><strong>推送一个本地标签</strong></p><pre><code>$ git push origin &lt;tagname&gt;</code></pre><p><strong>推送全部未推送过的本地标签</strong></p><pre><code>$ git push origin --tags</code></pre><p><strong>删除一个远程标签</strong></p><pre><code>$ git push origin :refs/tags/&lt;tagname&gt;</code></pre><p><strong>忽略文件</strong></p><blockquote><p>忽略某些文件时，需要编写.gitignore；</p><p>gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！</p><p>如果你确实想添加该文件，可以用-f强制添加到Git：<br>$ git add -f App.class<br>$ git check-ignore -v App.class</p></blockquote><p><strong>配置别名</strong></p><pre><code>$ $ git config --global alias.&lt;name&gt; &apos;option...&apos;</code></pre><blockquote><p>$ git config –global alias.unstage ‘reset HEAD’<br>当你敲入命令：<br>$ git unstage file<br>实际上Git执行的是：<br>$ git reset HEAD file</p></blockquote><p><strong>搭建Git服务器</strong></p><p>a. 安装git</p><pre><code>$ sudo apt-get install git</code></pre><p>b. 创建一个git用户，用来运行git服务：</p><pre><code>$ sudo adduser git</code></pre><p>c. 创建证书登录：</p><blockquote><p>收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。</p></blockquote><p>d. 初始化Git仓库：</p><blockquote><p>先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：</p></blockquote><pre><code>$ sudo git init --bare sample.git</code></pre><blockquote><p>Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：</p></blockquote><pre><code>$ sudo chown -R git:git sample.git</code></pre><p>e. 禁用shell登录：</p><blockquote><p>出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：</p></blockquote><pre><code>git:x:1001:1001:,,,:/home/git:/bin/bash</code></pre><blockquote><p>改为：</p></blockquote><pre><code>git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</code></pre><blockquote><p>这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。</p></blockquote><p>f. 克隆远程仓库：</p><blockquote><p>现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：</p></blockquote><pre><code>$ git clone git@server:/srv/sample.git</code></pre><p><strong>git push</strong></p><pre><code>$ git push origin master</code></pre><blockquote><p>origin指定了你要push到哪个remote<br>  master其实是一个“refspec”，正常的“refspec”的形式为”+<src>:<dst>”，冒号前表示local branch的名字，冒号后表示remote repository下 branch的名字。注意，如果你省略了<dst>，git就认为你想push到remote repository下和local branch相同名字的branch。听起来有点拗口，再解释下，push是怎么个push法，就是把本地branch指向的commit push到remote repository下的branch，比如:</dst></dst></src></p></blockquote><pre><code>$ git push origin master:master                (在local repository中找到名字为master的branch，使用它去更新remote repository下名字为master的branch，如果remote repository下不存在名字是master的branch，那么新建一个)$ git push origin master                    (省略了&lt;dst&gt;，等价于“git push origin)master:master”）$ git push origin master:refs/for/mybranch    (在local repository中找到名字为master的branch，用他去更新remote repository下面名字为mybranch的branch)$ git push origin HEAD:refs/for/mybranch    (HEAD指向当前工作的branch，master不一定指向当前工作的branch，所以我觉得用HEAD还比master好些)$ git push origin :mybranch                    (再origin repository里面查找mybranch，删除它。用一个空的去更新它，就相当于删除了)</code></pre><p><strong>git fetch 和 git pull 的区别</strong></p><p><strong>git fetch：</strong>相当于是从远程获取最新版本到本地，不会自动merge</p><pre><code>$ git fetch origin master$ git log -p master ../origin/master$ git merge origin/master</code></pre><blockquote><p>以上命令的含义：<br>  首先从远程的origin的master主分支下载最新的版本到origin/master分支上<br>  然后比较本地的master分支和origin/master分支的差别<br>  最后进行合并  </p></blockquote><p><strong>git pull：</strong>相当于是从远程获取最新版本并merge到本地</p><pre><code>$ git pull origin master</code></pre><blockquote><p>上述命令其实相当于git fetch 和 git merge<br>  在实际使用中，git fetch更安全一些<br>  因为在merge前，我们可以查看更新情况，然后再决定是否合并</p></blockquote><p><strong>git log</strong></p><pre><code>git log [&lt;options&gt;] [&lt;since&gt;..&lt;until&gt;] [[--] &lt;path&gt;...]</code></pre><blockquote><p>这条命令有很多参数选项</p></blockquote><pre><code>一、不带参数    1.如果不带任何参数，它会列出所有历史记录，最近的排在最上方，显示提交对象的哈希值，作者、提交日期、和提交说明    2.如果记录过多，则按Page Up、Page Down、↓、↑来控制显示    3.按q退出历史记录列表二、显示参数    1.-p：按补丁显示每个更新间的差异，比下一条- -stat命令信息更全    2.--stat：显示每次更新的修改文件的统计信息，每个提交都列出了修改过的文件，以及其中添加和移除的行数，并在最后列出所有增减行数小计    3.--shortstat：只显示--stat中最后的行数添加修改删除统计    4.--name-only：尽在已修改的提交信息后显示文件清单    5.--name-status：显示新增、修改和删除的文件清单    6.--abbrev-commit：仅显示SHA-1的前几个字符，而非所有的40个字符    7.--relative-date：使用较短的相对时间显示（例如：&quot;two weeks ago&quot;）    8.--graph：显示ASCII图形表示的分支合并历史    9.—pretty＝：使用其他格式显示历史提交信息，可选项有：oneline,short,medium,full,fuller,email,raw以及format:&lt;string&gt;,默认为medium，如：        1.--pretty=oneline：一行显示，只显示哈希值和提交说明（--online本身也可以作为单独的属性）        2.--pretty=format:” &quot;：控制显示的记录格式，如：    10.--date= (relative|local|default|iso|rfc|short|raw)：定制后边如果出现%ad或%cd时的日期格式三、筛选参数：    1.按数量    2.按日期    3.按作者    4.按commit描述    5.按文件    6.按分支    7.按内容    8.按范围    9.过滤掉merge commit    10.按标签tag      11.按commit</code></pre><p><strong>git help</strong></p><pre><code>$ git help$ git clone -help$ git init -help$ git add -help$ git tag -help$ git pull -help$ git push -help$ git status -help$ git commit -help$ git checkout -help$ git merge -help$ git stash -help</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git常用命令&quot;&gt;&lt;a href=&quot;#Git常用命令&quot; class=&quot;headerlink&quot; title=&quot;Git常用命令&quot;&gt;&lt;/a&gt;Git常用命令&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;全局设置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;a. 设置用户信息  &lt;/p&gt;
&lt;pre&gt;
      
    
    </summary>
    
      <category term="Git" scheme="https://liangyunfeng.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://liangyunfeng.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Notification框架简介</title>
    <link href="https://liangyunfeng.github.io/2017/03/19/Notification%E6%A1%86%E6%9E%B6%E7%AE%80%E4%BB%8B/"/>
    <id>https://liangyunfeng.github.io/2017/03/19/Notification框架简介/</id>
    <published>2017-03-19T06:45:43.000Z</published>
    <updated>2018-05-23T10:37:46.354Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li>Notification介绍</li><li>Notification框架原理</li><li>Notification框架服务端启动过程</li><li>SystemUI进程启动和绑定NotificationManagerService服务端过程</li><li>Notification调用过程</li><li>Notification通知提示音响起过程</li><li>总结</li></ul><h1 id="Notification介绍"><a href="#Notification介绍" class="headerlink" title="Notification介绍"></a>Notification介绍</h1><h3 id="功能作用"><a href="#功能作用" class="headerlink" title="功能作用"></a>功能作用</h3><ol><li>显示接收到短息、即时消息等信息 （如QQ、微信、新浪、短信）  </li><li>显示客户端的推送消息（如有新版本发布，广告，推荐新闻等） </li><li>显示正在进行的事务（例如：后台运行的程序）（如音乐播放器、版本更新时候的下载进度等）</li></ol><h3 id="通知的基本组成"><a href="#通知的基本组成" class="headerlink" title="通知的基本组成"></a>通知的基本组成</h3><img src="/2017/03/19/Notification框架简介/Notification.png" title="Notification"><pre><code>1. 标题2. 大图标3. 内容文字 4. 内容信息5. 小图标6. 通知的时间(Timestamp,默认为系统发出通知的时间，也可通过setWhen()来设置)</code></pre><h1 id="Notification框架原理"><a href="#Notification框架原理" class="headerlink" title="Notification框架原理"></a>Notification框架原理</h1><p>通知栏框架（Notificaiton），它适用于Android系统中交互事件的通知。它主要由三部分组成：系统服务端NotificationManagerService，通知显示端SystemUI，还有创建和更新通知的App端。<br>NotificationManagerService作为框架的服务端，在系统启动时就会启动并在后台运行，显示端SystemUI作为系统UI进程，也是Notification框架的客户端，在系统启动时也会启动并一直运行。<br>其它模块需调用Notification时，只需要调用NotificationManager.notify(int,Notification)就可以发出通知。</p><img src="/2017/03/19/Notification框架简介/模块关系图.png" title="模块关系图"><p>根据Notification框架的原理，我们就分别按以下几点来分析：</p><pre><code>1. Notification框架服务端启动过程2. SystemUI进程启动和绑定NotificationManagerService服务端过程3. Notification调用过程4. Notification通知提示音响起过程</code></pre><h3 id="Notification框架相关的包"><a href="#Notification框架相关的包" class="headerlink" title="Notification框架相关的包"></a>Notification框架相关的包</h3><pre><code>android/frameworks/base/services/java/com/android/server/SystemServer.java        //系统服务类启动的地方android/frameworks/base/core/java/com/android/server/LocalServices.java            //系统服务类通信的辅助类android/frameworks/base/core/java/android/service/notification/                    //Notification服务的接口类和监听类android/frameworks/base/services/core/java/com/android/server/notification/        //NotificationManagerService服务相关的类android/frameworks/base/core/java/android/app/        //NotificationManager、Notification类和INotificationManager.aidl的包android/frameworks/base/packages/SystemUI/                                        //Notification显示的UI进程</code></pre><h3 id="Notification框架的关系类图"><a href="#Notification框架的关系类图" class="headerlink" title="Notification框架的关系类图"></a>Notification框架的关系类图</h3><img src="/2017/03/19/Notification框架简介/类图.jpg" title="类图"><h1 id="Notification框架服务端启动过程"><a href="#Notification框架服务端启动过程" class="headerlink" title="Notification框架服务端启动过程"></a>Notification框架服务端启动过程</h1><p>SystemServer启动的Notification管理服务类是NotificationManagerService，保存到SystemServiceManager的是NotificationManagerService服务对象中的INotificationManager.Stub()，但是绑定到ServiceManager中Context.NOTIFICATION_ SERVICE的服务类是NotificationManager，所有开发者通过Context.getSystemService(Context.NOTIFICATION_SERVICE)获取回来的服务类不是NotificationManagerServiced服务对象，而是NotificationManager对象，需要再通过NotificationManager对象中的getService()方法，获取SystemServiceManager系统服务管理对象中保存的INotificationManager.Stub()对象。这样NotificationManager就能通过INotificationManager.Stub()对象和NotificationManagerService服务对象进行远程通信了</p><p>系统启动时，SystemServiceRegistry类中会把NotificationManager注册为系统服务提供给其它服务或者应用获取系统服务使用，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">/android/frameworks/base/core/java/android/app/SystemServiceRegistry.java </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HashMap&lt;Class&lt;?&gt;, String&gt; SYSTEM_SERVICE_NAMES =</span><br><span class="line"><span class="keyword">new</span> HashMap&lt;Class&lt;?&gt;, String&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HashMap&lt;String, ServiceFetcher&lt;?&gt;&gt; SYSTEM_SERVICE_FETCHERS =</span><br><span class="line"><span class="keyword">new</span> HashMap&lt;String, ServiceFetcher&lt;?&gt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">registerService(Context.NOTIFICATION_SERVICE, NotificationManager.class,</span><br><span class="line"><span class="keyword">new</span> CachedServiceFetcher&lt;NotificationManager&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> NotificationManager <span class="title">createService</span><span class="params">(ContextImpl ctx)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> Context outerContext = ctx.getOuterContext();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> NotificationManager(</span><br><span class="line"><span class="keyword">new</span> ContextThemeWrapper(outerContext,</span><br><span class="line">Resources.selectSystemTheme(<span class="number">0</span>,</span><br><span class="line">outerContext.getApplicationInfo().targetSdkVersion,</span><br><span class="line">com.android.internal.R.style.Theme_Dialog,</span><br><span class="line">com.android.internal.R.style.Theme_Holo_Dialog,</span><br><span class="line">com.android.internal.R.style.Theme_DeviceDefault_Dialog,</span><br><span class="line">com.android.internal.R.style.Theme_DeviceDefault_Light_Dialog)),</span><br><span class="line">ctx.mMainThread.getHandler());</span><br><span class="line">&#125;&#125;);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">registerService</span><span class="params">(String serviceName, Class&lt;T&gt; serviceClass,</span></span></span><br><span class="line"><span class="function"><span class="params">ServiceFetcher&lt;T&gt; serviceFetcher)</span> </span>&#123;</span><br><span class="line">SYSTEM_SERVICE_NAMES.put(serviceClass, serviceName);</span><br><span class="line">SYSTEM_SERVICE_FETCHERS.put(serviceName, serviceFetcher);<span class="comment">//把注册的服务保存到列表对象中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getSystemService</span><span class="params">(ContextImpl ctx, String name)</span> </span>&#123;</span><br><span class="line">ServiceFetcher&lt;?&gt; fetcher = SYSTEM_SERVICE_FETCHERS.get(name);</span><br><span class="line"><span class="keyword">return</span> fetcher != <span class="keyword">null</span> ? fetcher.getService(ctx) : <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Activity或者Service中，可以直接通过Context.getSystemService(Context.NOTIFICATION_SERVICE)就可以获取系统服务使用。ActivityThread.performLaunchActivity()方法中创建ContextImpl对象并通过activity.attach()传递给Activity对象，再通过attachBaseContext()方法赋值给父类ContextWrapper中Context mBase对象，在Activity或者Service中调用getSystemService()方法，最终是调用ContextImpl中的getSystemService()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//android/frameworks/base/core/java/android/app/ContextImpl.java </span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getSystemService</span><span class="params">(String name)</span> </span>&#123;<span class="comment">//从注册到系统的服务列表中获取对应的服务</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">Object registrySystemService = SystemServiceRegistry.getSystemService(<span class="keyword">this</span>, name);</span><br><span class="line"><span class="keyword">return</span> registrySystemService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SystemServiceRegistry中注册的NotificationManager对象，其实不是真正的Notification服务，它只是一个调用接口对象，需要通过远程调用来实现和NotificationManagerService服务对象进行通信，真正实现相应的操作。以下是NotificationManagerService服务的启动流程。系统启动时会调用SystemServer来启动相应的系统服务对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">/android/frameworks/base/services/java/com/android/server/SystemServer.java </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> SystemServiceManager mSystemServiceManager;<span class="comment">//系统服务管理类</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//创建系统服务管理对象</span></span><br><span class="line">mSystemServiceManager = <span class="keyword">new</span> SystemServiceManager(mSystemContext);</span><br><span class="line"><span class="comment">//把系统服务管理对象保存到本地服务列表对象中，这样在系统进程中就可以通过LocalServices.getService(Class&lt;T&gt; type)</span></span><br><span class="line"><span class="comment">//直接返回本地服务列表中的服务对象进行使用</span></span><br><span class="line">LocalServices.addService(SystemServiceManager.class, mSystemServiceManager);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startOtherServices</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">INotificationManager notification = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">mSystemServiceManager.startService(NotificationManagerService.class);<span class="comment">//启动NotificationManagerService服务对象</span></span><br><span class="line"><span class="comment">//获取NotificationManagerService服务对象的桩，用于进行远程调用</span></span><br><span class="line">notification = INotificationManager.Stub.asInterface(</span><br><span class="line">ServiceManager.getService(Context.NOTIFICATION_SERVICE));</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/android/frameworks/base/services/core/java/com/android/server/SystemServiceManager.java <span class="comment">//系统服务管理类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T extends SystemService&gt; <span class="function">T <span class="title">startService</span><span class="params">(Class&lt;T&gt; serviceClass)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> String name = serviceClass.getName();</span><br><span class="line"><span class="keyword">final</span> T service;</span><br><span class="line"></span><br><span class="line">Constructor&lt;T&gt; constructor = serviceClass.getConstructor(Context.class);</span><br><span class="line">service = constructor.newInstance(mContext);<span class="comment">//实例化服务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Register it.</span></span><br><span class="line">mServices.add(service);<span class="comment">//注册服务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Start it.</span></span><br><span class="line">service.onStart();<span class="comment">//启动服务</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//系统服务类，NotificationManagerService的父类</span></span><br><span class="line">/android/frameworks/base/services/core/java/com/android/server/SystemService.java </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span></span>;<span class="comment">//抽象方法，在子类中实现</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">publishBinderService</span><span class="params">(String name, IBinder service)</span> </span>&#123;</span><br><span class="line">publishBinderService(name, service, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">publishBinderService</span><span class="params">(String name, IBinder service,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">boolean</span> allowIsolated)</span> </span>&#123;</span><br><span class="line">ServiceManager.addService(name, service, allowIsolated);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定和发布key为Context.NOTIFICATION_SERVICE的NotificationManager系统服务类</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">publishLocalService</span><span class="params">(Class&lt;T&gt; type, T service)</span> </span>&#123;</span><br><span class="line">LocalServices.addService(type, service);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加到内部系统服务类的集合类LocalServices中</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> SystemServiceManager <span class="title">getManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> LocalServices.getService(SystemServiceManager.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SystemServer中调用NotificationManagerService的onStart()方法来启动NotificationManagerService服务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br></pre></td><td class="code"><pre><span class="line">/android/frameworks/base/services/core/java/com/android/server/notification/NotificationManagerService.java </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotificationManagerService</span> <span class="keyword">extends</span> <span class="title">SystemService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">mListeners = <span class="keyword">new</span> NotificationListeners();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定和发布key为Context.NOTIFICATION_SERVICE的NotificationManager系统服务类</span></span><br><span class="line">publishBinderService(Context.NOTIFICATION_SERVICE, mService);</span><br><span class="line"><span class="comment">//添加到内部系统服务类的集合类LocalServices中</span></span><br><span class="line">publishLocalService(NotificationManagerInternal.class, mInternalService);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只开放给系统内部调用的API</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> NotificationManagerInternal mInternalService = <span class="keyword">new</span> NotificationManagerInternal() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueueNotification</span><span class="params">(String pkg, String opPkg, <span class="keyword">int</span> callingUid, <span class="keyword">int</span> callingPid,</span></span></span><br><span class="line"><span class="function"><span class="params">String tag, <span class="keyword">int</span> id, Notification notification, <span class="keyword">int</span>[] idReceived, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">enqueueNotificationInternal(pkg, opPkg, callingUid, callingPid, tag, id, notification,</span><br><span class="line">idReceived, userId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeForegroundServiceFlagFromNotification</span><span class="params">(String pkg, <span class="keyword">int</span> notificationId,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">checkCallerIsSystem();</span><br><span class="line"><span class="keyword">synchronized</span> (mNotificationList) &#123;</span><br><span class="line"><span class="keyword">int</span> i = indexOfNotificationLocked(pkg, <span class="keyword">null</span>, notificationId, userId);</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">NotificationRecord r = mNotificationList.get(i);</span><br><span class="line">StatusBarNotification sbn = r.sbn;</span><br><span class="line">sbn.getNotification().flags = (r.mOriginalFlags &amp; ~Notification.FLAG_FOREGROUND_SERVICE);</span><br><span class="line">mRankingHelper.sort(mNotificationList);</span><br><span class="line">mListeners.notifyPostedLocked(sbn, sbn <span class="comment">/* oldSbn */</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//INotificationManager.Stub用于与NotificationManager类和SystemUI进程进行远程通信的桩 (或者其它模块)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> IBinder mService = <span class="keyword">new</span> INotificationManager.Stub() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueueNotificationWithTag</span><span class="params">(String pkg, String opPkg, String tag, <span class="keyword">int</span> id,</span></span></span><br><span class="line"><span class="function"><span class="params">Notification notification, <span class="keyword">int</span>[] idOut, <span class="keyword">int</span> userId)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">enqueueNotificationInternal(pkg, opPkg, Binder.getCallingUid(),</span><br><span class="line">Binder.getCallingPid(), tag, id, notification, idOut, userId);<span class="comment">//添加或更新Notification</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancelNotificationWithTag</span><span class="params">(String pkg, String tag, <span class="keyword">int</span> id, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">checkCallerIsSystemOrSameApp(pkg);</span><br><span class="line">userId = ActivityManager.handleIncomingUser(Binder.getCallingPid(),</span><br><span class="line">Binder.getCallingUid(), userId, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="string">"cancelNotificationWithTag"</span>, pkg);</span><br><span class="line">cancelNotification(Binder.getCallingUid(), Binder.getCallingPid(), pkg, tag, id, <span class="number">0</span>,</span><br><span class="line">Binder.getCallingUid() == Process.SYSTEM_UID</span><br><span class="line">? <span class="number">0</span> : Notification.FLAG_FOREGROUND_SERVICE, <span class="keyword">false</span>, userId, REASON_NOMAN_CANCEL,</span><br><span class="line"><span class="keyword">null</span>);<span class="comment">//删除Notification</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancelAllNotifications</span><span class="params">(String pkg, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">checkCallerIsSystemOrSameApp(pkg);</span><br><span class="line">userId = ActivityManager.handleIncomingUser(Binder.getCallingPid(),</span><br><span class="line">Binder.getCallingUid(), userId, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="string">"cancelAllNotifications"</span>, pkg);</span><br><span class="line">cancelAllNotificationsInt(Binder.getCallingUid(), Binder.getCallingPid(),</span><br><span class="line">pkg, <span class="number">0</span>, Notification.FLAG_FOREGROUND_SERVICE, <span class="keyword">true</span>, userId,</span><br><span class="line">REASON_NOMAN_CANCEL_ALL, <span class="keyword">null</span>);<span class="comment">//删除所有Notification</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerListener</span><span class="params">(<span class="keyword">final</span> INotificationListener listener,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">final</span> ComponentName component, <span class="keyword">final</span> <span class="keyword">int</span> userid)</span> </span>&#123;</span><br><span class="line">enforceSystemOrSystemUI(<span class="string">"INotificationManager.registerListener"</span>);</span><br><span class="line"><span class="comment">//把NotificationListenerService对象注册到ManagedServices服务管理子类NotificationListeners对象中</span></span><br><span class="line">mListeners.registerService(listener, component, userid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregisterListener</span><span class="params">(INotificationListener listener, <span class="keyword">int</span> userid)</span> </span>&#123;</span><br><span class="line"><span class="comment">//把NotificationListenerService对象从ManagedServices服务管理子类NotificationListeners对象中解除</span></span><br><span class="line">mListeners.unregisterService(listener, userid);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enqueueNotificationInternal</span><span class="params">(<span class="keyword">final</span> String pkg, <span class="keyword">final</span> String opPkg, <span class="keyword">final</span> <span class="keyword">int</span> callingUid,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">final</span> <span class="keyword">int</span> callingPid, <span class="keyword">final</span> String tag, <span class="keyword">final</span> <span class="keyword">int</span> id, <span class="keyword">final</span> Notification notification,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span>[] idOut, <span class="keyword">int</span> incomingUserId)</span> </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (mNotificationList) &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//调用服务管理对象mListeners来更新所有注册到mListeners中的NotificationListenerService对象</span></span><br><span class="line">mListeners.notifyPostedLocked(n, oldSbn);</span><br><span class="line"><span class="comment">//实现播放notification的铃声，使led灯亮起来或者震动等操作。buzz:嗡嗡叫，beep: 嘟嘟响，blink: 闪烁</span></span><br><span class="line">buzzBeepBlinkLocked(r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">idOut[<span class="number">0</span>] = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ManagedServices服务管理类，就是用于一类服务的管理对象，例如:如需要管理几个同一类的服务对象NotificationListenerService</span></span><br><span class="line"><span class="comment">//只需要把相关的NotificationListenerService对象注册到ManagedServices服务管理对象中，需要更新的时候，只需要调用</span></span><br><span class="line"><span class="comment">//ManagedServices服务管理对象对注册的NotificationListenerService对象进行更新即可</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotificationListeners</span> <span class="keyword">extends</span> <span class="title">ManagedServices</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NotificationListeners</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(getContext(), mHandler, mNotificationList, mUserProfiles);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> IInterface <span class="title">asInterface</span><span class="params">(IBinder binder)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> INotificationListener.Stub.asInterface(binder);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新添加的方法，调用这个方法，就会更新所有注册进来的NotificationListenerService对象来更新</span></span><br><span class="line"><span class="comment">//调用服务管理对象mListeners来更新所有注册到mListeners中的NotificationListenerService对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyPostedLocked</span><span class="params">(StatusBarNotification sbn, StatusBarNotification oldSbn)</span> </span>&#123;</span><br><span class="line">StatusBarNotification sbnClone = <span class="keyword">null</span>;</span><br><span class="line">StatusBarNotification sbnCloneLight = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> ManagedServiceInfo info : mServices) &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">if</span> (trim == TRIM_LIGHT &amp;&amp; sbnCloneLight == <span class="keyword">null</span>) &#123;</span><br><span class="line">sbnCloneLight = sbn.cloneLight();</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (trim == TRIM_FULL) &#123;</span><br><span class="line">sbnClone = sbn.clone();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> StatusBarNotification sbnToPost =</span><br><span class="line">(trim == TRIM_FULL) ? sbnClone : sbnCloneLight;</span><br><span class="line"></span><br><span class="line">mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">notifyPosted(info, sbnToPost, update);<span class="comment">//调用更新通知方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyRemovedLocked</span><span class="params">(StatusBarNotification sbn)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> StatusBarNotification sbnLight = sbn.cloneLight();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> ManagedServiceInfo info : mServices) &#123;</span><br><span class="line"><span class="keyword">final</span> NotificationRankingUpdate update = makeRankingUpdateLocked(info);</span><br><span class="line">mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">notifyRemoved(info, sbnLight, update);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用更新通知方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyPosted</span><span class="params">(<span class="keyword">final</span> ManagedServiceInfo info,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">final</span> StatusBarNotification sbn, NotificationRankingUpdate rankingUpdate)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> INotificationListener listener = (INotificationListener)info.service;</span><br><span class="line">StatusBarNotificationHolder sbnHolder = <span class="keyword">new</span> StatusBarNotificationHolder(sbn);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//回调NotificationListenerService对象中的方法onNotificationPosted()，在SystemUI中显示Notification</span></span><br><span class="line">listener.onNotificationPosted(sbnHolder, rankingUpdate);</span><br><span class="line">&#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">Log.e(TAG, <span class="string">"unable to notify listener (posted): "</span> + listener, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyRemoved</span><span class="params">(ManagedServiceInfo info, StatusBarNotification sbn,</span></span></span><br><span class="line"><span class="function"><span class="params">NotificationRankingUpdate rankingUpdate)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!info.enabledAndUserMatches(sbn.getUserId())) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> INotificationListener listener = (INotificationListener) info.service;</span><br><span class="line">StatusBarNotificationHolder sbnHolder = <span class="keyword">new</span> StatusBarNotificationHolder(sbn);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">listener.onNotificationRemoved(sbnHolder, rankingUpdate);</span><br><span class="line">&#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">Log.e(TAG, <span class="string">"unable to notify listener (removed): "</span> + listener, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//系统服务类，NotificationManagerService的父类</span></span><br><span class="line">/android/frameworks/base/services/core/java/com/android/server/notification/ManagedServices.java </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">protected</span> IInterface <span class="title">asInterface</span><span class="params">(IBinder binder)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> ArrayList&lt;ManagedServiceInfo&gt; mServices = <span class="keyword">new</span> ArrayList&lt;ManagedServiceInfo&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManagedServices</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onServiceAdded</span><span class="params">(ManagedServiceInfo info)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onServiceRemovedLocked</span><span class="params">(ManagedServiceInfo removed)</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把Service对象从ManagedServices服务管理类对象中删除</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregisterService</span><span class="params">(IInterface service, <span class="keyword">int</span> userid)</span> </span>&#123;</span><br><span class="line">checkNotNull(service);</span><br><span class="line">unregisterServiceImpl(service, userid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把Service对象注册到ManagedServices服务管理类对象中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerService</span><span class="params">(IInterface service, ComponentName component, <span class="keyword">int</span> userid)</span> </span>&#123;</span><br><span class="line">checkNotNull(service);</span><br><span class="line">ManagedServiceInfo info = registerServiceImpl(service, component, userid);</span><br><span class="line"><span class="keyword">if</span> (info != <span class="keyword">null</span>) &#123;</span><br><span class="line">onServiceAdded(info);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ManagedServiceInfo <span class="title">registerServiceImpl</span><span class="params">(<span class="keyword">final</span> IInterface service,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">final</span> ComponentName component, <span class="keyword">final</span> <span class="keyword">int</span> userid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (mMutex) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ManagedServiceInfo info = newServiceInfo(service, component, userid,</span><br><span class="line"><span class="keyword">true</span> <span class="comment">/*isSystem*/</span>, <span class="keyword">null</span>, Build.VERSION_CODES.LOLLIPOP);</span><br><span class="line">service.asBinder().linkToDeath(info, <span class="number">0</span>);</span><br><span class="line">mServices.add(info);</span><br><span class="line"><span class="keyword">return</span> info;</span><br><span class="line">&#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unregisterServiceImpl</span><span class="params">(IInterface service, <span class="keyword">int</span> userid)</span> </span>&#123;</span><br><span class="line">ManagedServiceInfo info = removeServiceImpl(service, userid);</span><br><span class="line"><span class="keyword">if</span> (info != <span class="keyword">null</span> &amp;&amp; info.connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">mContext.unbindService(info.connection);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SystemUI进程启动和绑定NotificationManagerService服务端过程："><a href="#SystemUI进程启动和绑定NotificationManagerService服务端过程：" class="headerlink" title="SystemUI进程启动和绑定NotificationManagerService服务端过程："></a>SystemUI进程启动和绑定NotificationManagerService服务端过程：</h1><p>至此，Notification框架的服务端就已经启动完毕，NotificationManagerService类只是管理Notification的逻辑，显示端是在SystemUI进程中实现的，那么NotificationManagerService服务对象和SystemUI进程间是怎么通信的呢？两个不同进程间通信，很多同学可能就会想到Android的远程过程调用（Remote Procedure Call，RPC）方式来实现，这种猜测是合理的，而且这里也的确是这么实现的。与很多其他的基于RPC的解决方案一样，Android使用一种接口定义语言（Interface Definition Language，IDL）来公开服务的接口。所以我们先来看下NotificationManagerService服务和SystemUI进程通信的服务接口文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">/android/frameworks/base/core/java/android/app/INotificationManager.aidl </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">INotificationManager</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cancelAllNotifications</span><span class="params">(String pkg, <span class="keyword">int</span> userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enqueueToast</span><span class="params">(String pkg, ITransientNotification callback, <span class="keyword">int</span> duration)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cancelToast</span><span class="params">(String pkg, ITransientNotification callback)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enqueueNotificationWithTag</span><span class="params">(String pkg, String opPkg, String tag, <span class="keyword">int</span> id,</span></span></span><br><span class="line"><span class="function"><span class="params">            in Notification notification, inout <span class="keyword">int</span>[] idReceived, <span class="keyword">int</span> userId)</span></span>;<span class="comment">//发出通知的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cancelNotificationWithTag</span><span class="params">(String pkg, String tag, <span class="keyword">int</span> id, <span class="keyword">int</span> userId)</span></span>;<span class="comment">//取消通知的方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setNotificationsEnabledForPackage</span><span class="params">(String pkg, <span class="keyword">int</span> uid, <span class="keyword">boolean</span> enabled)</span></span>;<span class="comment">//Settings中关闭应用通知</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">areNotificationsEnabledForPackage</span><span class="params">(String pkg, <span class="keyword">int</span> uid)</span></span>;<span class="comment">//判断应用是否可发通知</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPackagePriority</span><span class="params">(String pkg, <span class="keyword">int</span> uid, <span class="keyword">int</span> priority)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getPackagePriority</span><span class="params">(String pkg, <span class="keyword">int</span> uid)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPackagePeekable</span><span class="params">(String pkg, <span class="keyword">int</span> uid, <span class="keyword">boolean</span> peekable)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">getPackagePeekable</span><span class="params">(String pkg, <span class="keyword">int</span> uid)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPackageVisibilityOverride</span><span class="params">(String pkg, <span class="keyword">int</span> uid, <span class="keyword">int</span> visibility)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getPackageVisibilityOverride</span><span class="params">(String pkg, <span class="keyword">int</span> uid)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Remove this when callers have been migrated to the equivalent</span></span><br><span class="line">    <span class="comment">// INotificationListener method.</span></span><br><span class="line">    StatusBarNotification[] getActiveNotifications(String callingPkg);</span><br><span class="line">    StatusBarNotification[] getHistoricalNotifications(String callingPkg, <span class="keyword">int</span> count);</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册INotificationListener服务的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerListener</span><span class="params">(in INotificationListener listener, in ComponentName component, <span class="keyword">int</span> userid)</span></span>;</span><br><span class="line"><span class="comment">//解除INotificationListener服务的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unregisterListener</span><span class="params">(in INotificationListener listener, <span class="keyword">int</span> userid)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cancelNotificationFromListener</span><span class="params">(in INotificationListener token, String pkg, String tag, <span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cancelNotificationsFromListener</span><span class="params">(in INotificationListener token, in String[] keys)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setNotificationsShownFromListener</span><span class="params">(in INotificationListener token, in String[] keys)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ParceledListSlice <span class="title">getActiveNotificationsFromListener</span><span class="params">(in INotificationListener token, in String[] keys, <span class="keyword">int</span> trim)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">requestHintsFromListener</span><span class="params">(in INotificationListener token, <span class="keyword">int</span> hints)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getHintsFromListener</span><span class="params">(in INotificationListener token)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">requestInterruptionFilterFromListener</span><span class="params">(in INotificationListener token, <span class="keyword">int</span> interruptionFilter)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getInterruptionFilterFromListener</span><span class="params">(in INotificationListener token)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setOnNotificationPostedTrimFromListener</span><span class="params">(in INotificationListener token, <span class="keyword">int</span> trim)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setInterruptionFilter</span><span class="params">(String pkg, <span class="keyword">int</span> interruptionFilter)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ComponentName <span class="title">getEffectsSuppressor</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">matchesCallFilter</span><span class="params">(in Bundle extras)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">matchesMessageFilter</span><span class="params">(in Bundle extras)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isSystemConditionProviderEnabled</span><span class="params">(String path)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getZenMode</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">ZenModeConfig <span class="title">getZenModeConfig</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">setZenModeConfig</span><span class="params">(in ZenModeConfig config, String reason)</span></span>;</span><br><span class="line">    <span class="function">oneway <span class="keyword">void</span> <span class="title">setZenMode</span><span class="params">(<span class="keyword">int</span> mode, in Uri conditionId, String reason)</span></span>;</span><br><span class="line">    <span class="function">oneway <span class="keyword">void</span> <span class="title">notifyConditions</span><span class="params">(String pkg, in IConditionProvider provider, in Condition[] conditions)</span></span>;</span><br><span class="line">    <span class="function">oneway <span class="keyword">void</span> <span class="title">requestZenModeConditions</span><span class="params">(in IConditionListener callback, <span class="keyword">int</span> relevance)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isNotificationPolicyAccessGranted</span><span class="params">(String pkg)</span></span>;</span><br><span class="line">    NotificationManager.<span class="function">Policy <span class="title">getNotificationPolicy</span><span class="params">(String pkg)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setNotificationPolicy</span><span class="params">(String pkg, in NotificationManager.Policy policy)</span></span>;</span><br><span class="line">    String[] getPackagesRequestingNotificationPolicyAccess();</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isNotificationPolicyAccessGrantedForPackage</span><span class="params">(String pkg)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setNotificationPolicyAccessGranted</span><span class="params">(String pkg, <span class="keyword">boolean</span> granted)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] getBackupPayload(<span class="keyword">int</span> user);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">applyRestore</span><span class="params">(in <span class="keyword">byte</span>[] payload, <span class="keyword">int</span> user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ParceledListSlice <span class="title">getAppActiveNotifications</span><span class="params">(String callingPkg, <span class="keyword">int</span> userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//***************************************************************//</span></span><br><span class="line">    <span class="comment">// ++ @noti.sysui [START] NotificationManager APIs for SEC ONLY  //</span></span><br><span class="line">    <span class="comment">//***************************************************************//</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isNotificationInterruptable</span><span class="params">(String pkg, String opPkg, String tag, <span class="keyword">int</span> id, </span></span></span><br><span class="line"><span class="function"><span class="params">                in Notification notification, in <span class="keyword">long</span> time, <span class="keyword">int</span> userId)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cancelSummaryNotificationWithTag</span><span class="params">(String pkg, String tag, <span class="keyword">int</span> id, <span class="keyword">int</span> userId)</span></span>;</span><br><span class="line">    <span class="comment">//***************************************************************///</span></span><br><span class="line">    <span class="comment">// -- @noti.sysui [START] NotificationManager APIs for SEC ONLY  //</span></span><br><span class="line">    <span class="comment">//***************************************************************//</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">//WTL_EDM_START</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clearAllNotificationsAsUser</span><span class="params">(<span class="keyword">int</span> userId)</span></span>;</span><br><span class="line">    <span class="comment">//WTL_EDM_END</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enqueueEdgeNotification</span><span class="params">(String pkg, String opPkg, <span class="keyword">int</span> id, in Bundle extras, <span class="keyword">int</span> userId)</span></span>;<span class="comment">//发侧屏通知的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeEdgeNotification</span><span class="params">(String pkg, <span class="keyword">int</span> id, in Bundle extras, <span class="keyword">int</span> userId)</span></span>;<span class="comment">//删除侧屏通知的方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/android/frameworks/base/core/java/android/service/notification/INotificationListener.aidl </span><br><span class="line"></span><br><span class="line">oneway <span class="class"><span class="keyword">interface</span> <span class="title">INotificationListener</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onListenerConnected</span><span class="params">(in NotificationRankingUpdate update)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onNotificationPosted</span><span class="params">(in IStatusBarNotificationHolder notificationHolder,</span></span></span><br><span class="line"><span class="function"><span class="params">            in NotificationRankingUpdate update)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onNotificationRemoved</span><span class="params">(in IStatusBarNotificationHolder notificationHolder,</span></span></span><br><span class="line"><span class="function"><span class="params">            in NotificationRankingUpdate update)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onNotificationRankingUpdate</span><span class="params">(in NotificationRankingUpdate update)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onListenerHintsChanged</span><span class="params">(<span class="keyword">int</span> hints)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onInterruptionFilterChanged</span><span class="params">(<span class="keyword">int</span> interruptionFilter)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onEdgeNotificationPosted</span><span class="params">(String pkg, <span class="keyword">int</span> id, in Bundle extra)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onEdgeNotificationRemoved</span><span class="params">(String pkg, <span class="keyword">int</span> id, in Bundle extra)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个接口类的服务端就是NotificationManagerService服务对象中的INotificationManager.Stub对象mService</p><pre><code>private final IBinder mService = new INotificationManager.Stub(){};</code></pre><p>客户端可以通过以下方式来获取和服务端通信的桩对象：</p><pre><code>IBinder b = ServiceManager.getService(Context.NOTIFICATION_SERVICE);INotificationManager service = INotificationManager.Stub.asInterface(b);</code></pre><p>SystemUI进程在初始化过程中，会创建一个NotificationListenerService服务类，服务对象中创建一个INotificationListener对象并通过远程过程调用把这个INotificationListener对象注册到NotificationManagerService服务对象的服务管理类子类NotificationListeners对象mListeners中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">/android/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> NotificationListenerService mNotificationListener =</span><br><span class="line">        <span class="keyword">new</span> NotificationListenerService() &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNotificationPosted</span><span class="params">(<span class="keyword">final</span> StatusBarNotification sbn,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> RankingMap rankingMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">"onNotificationPosted: "</span> + sbn);</span><br><span class="line">        <span class="keyword">if</span> (sbn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    String key = sbn.getKey();</span><br><span class="line">                    <span class="keyword">boolean</span> isUpdate = mNotificationData.get(key) != <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (isUpdate) &#123;</span><br><span class="line">                        updateNotification(sbn, rankingMap);<span class="comment">//更新Notification</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        addNotification(sbn, rankingMap, <span class="keyword">null</span> <span class="comment">/* oldEntry */</span>);<span class="comment">//添加Notification</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNotificationRemoved</span><span class="params">(StatusBarNotification sbn,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> RankingMap rankingMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">"onNotificationRemoved: "</span> + sbn);</span><br><span class="line">        <span class="keyword">if</span> (sbn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> String key = sbn.getKey();</span><br><span class="line">            mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    removeNotification(key, rankingMap);<span class="comment">//删除Notification</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    mNotificationListener.registerAsSystemService(mContext,</span><br><span class="line">            <span class="keyword">new</span> ComponentName(mContext.getPackageName(), getClass().getCanonicalName()),</span><br><span class="line">            UserHandle.USER_ALL);<span class="comment">//把NotificationListenerService对象注册为系统服务并通过和NotificationManagerService服务远程通信</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/android/frameworks/base/core/java/android/service/notification/NotificationListenerService.java </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerAsSystemService</span><span class="params">(Context context, ComponentName componentName,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> currentUser)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    mSystemContext = context;</span><br><span class="line">    <span class="keyword">if</span> (mWrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">        mWrapper = <span class="keyword">new</span> INotificationListenerWrapper();</span><br><span class="line">    &#125;</span><br><span class="line">    INotificationManager noMan = getNotificationInterface();</span><br><span class="line"><span class="comment">//通过远程过程把INotificationListener注册到NotificationManagerService服务对象中，</span></span><br><span class="line"><span class="comment">//这样NotificationManagerService对象就可以通过INotificationListener通信对象</span></span><br><span class="line"><span class="comment">//直接回调SystemUI进程中的NotificationListenerService对象来操作显示UI</span></span><br><span class="line">    noMan.registerListener(mWrapper, componentName, currentUser);</span><br><span class="line">    mCurrentUser = currentUser;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> INotificationManager <span class="title">getNotificationInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mNoMan == <span class="keyword">null</span>) &#123;</span><br><span class="line">        mNoMan = INotificationManager.Stub.asInterface(</span><br><span class="line">                ServiceManager.getService(Context.NOTIFICATION_SERVICE));<span class="comment">//这里就是上面客户端可以获取和服务端通信的桩对象的过程</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mNoMan;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNotificationPosted</span><span class="params">(StatusBarNotification sbn)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// optional//在SystemUI中BaseStatusBar的NotificationListenerService重写了这个方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">INotificationListenerWrapper</span> <span class="keyword">extends</span> <span class="title">INotificationListener</span>.<span class="title">Stub</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNotificationPosted</span><span class="params">(IStatusBarNotificationHolder sbnHolder,</span></span></span><br><span class="line"><span class="function"><span class="params">            NotificationRankingUpdate update)</span> </span>&#123;</span><br><span class="line">        StatusBarNotification sbn;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sbn = sbnHolder.get();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (mWrapper) &#123;</span><br><span class="line">            applyUpdate(update);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (sbn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    NotificationListenerService.<span class="keyword">this</span>.onNotificationPosted(sbn, mRankingMap);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    NotificationListenerService.<span class="keyword">this</span>.onNotificationRankingUpdate(mRankingMap);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"Error running onNotificationPosted"</span>, t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNotificationRemoved</span><span class="params">(IStatusBarNotificationHolder sbnHolder,NotificationRankingUpdate update)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onListenerConnected</span><span class="params">(NotificationRankingUpdate update)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNotificationRankingUpdate</span><span class="params">(NotificationRankingUpdate update)</span> <span class="keyword">throws</span> RemoteException </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onListenerHintsChanged</span><span class="params">(<span class="keyword">int</span> hints)</span> <span class="keyword">throws</span> RemoteException </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInterruptionFilterChanged</span><span class="params">(<span class="keyword">int</span> interruptionFilter)</span> <span class="keyword">throws</span> RemoteException </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEdgeNotificationPosted</span><span class="params">(String pkg, <span class="keyword">int</span> id, Bundle extra)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEdgeNotificationRemoved</span><span class="params">(String pkg, <span class="keyword">int</span> id, Bundle extra)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Notification调用过程"><a href="#Notification调用过程" class="headerlink" title="Notification调用过程"></a>Notification调用过程</h1><p>Notification调用过程可以从应用开始，通过NotificationManager.notify()来发出通知，NotificationManager通过和NotificationManagerService服务对象通信，NotificationManagerService服务对象再利用通过NotificationListeners中监听的服务列表与SystemUI进程启动的系统服务NotificationListenerService中的INotificationListener对象通信，就可以调用SystemUI进程进行显示。</p><h3 id="调用过程如下图所示："><a href="#调用过程如下图所示：" class="headerlink" title="调用过程如下图所示："></a>调用过程如下图所示：</h3><img src="/2017/03/19/Notification框架简介/时序图.jpg" title="时序图"><h3 id="对应的代码，如以下所示："><a href="#对应的代码，如以下所示：" class="headerlink" title="对应的代码，如以下所示："></a>对应的代码，如以下所示：</h3><p>应用程序要发通知或取消通知，只需要获取系统的通知管理服务，调用notify或者cancel来操作通知即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NotificationManager nm = (NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);<span class="comment">//获取通知管理服务</span></span><br><span class="line">Notification.Builder builder = <span class="keyword">new</span> Notification.Builder(<span class="keyword">this</span>);</span><br><span class="line">builder.setSmallIcon(R.drawable.smallicon)</span><br><span class="line">.setContentTitle(<span class="string">"This is Title"</span>)</span><br><span class="line">.setContentText(<span class="string">"This is Content"</span>);</span><br><span class="line">Notification n = b.build();<span class="comment">//创建Notification</span></span><br><span class="line">nm.notify(ID, n);<span class="comment">//发通知</span></span><br></pre></td></tr></table></figure><p>NotificationManager是管理通知的服务类，它负责与NotificationManagerService服务对象通信，并通过调用NotificationManagerService服务对象添加、更新、删除通知等等，所支持的功能可以参照远程通信服务接口INotificationManager.aidl中公开的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/android/frameworks/base/core/java/android/app/NotificationManager.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> INotificationManager sService;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> INotificationManager <span class="title">getService</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sService != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> sService;</span><br><span class="line">    &#125;</span><br><span class="line">    IBinder b = ServiceManager.getService(<span class="string">"notification"</span>);<span class="comment">//获取系统服务的桩对象</span></span><br><span class="line">    sService = INotificationManager.Stub.asInterface(b);<span class="comment">//把桩对象转化成远程通信对象</span></span><br><span class="line">    <span class="keyword">return</span> sService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(<span class="keyword">int</span> id, Notification notification)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    notify(<span class="keyword">null</span>, id, notification);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(String tag, <span class="keyword">int</span> id, Notification notification)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] idOut = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">    INotificationManager service = getService();</span><br><span class="line">    String pkg = mContext.getPackageName();</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    Notification stripped = notification.clone();</span><br><span class="line">    Builder.stripForDelivery(stripped);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//调用远程服务对象的enqueueNotificationWithTag()方法来调用NotificationManagerService对象发出通知</span></span><br><span class="line">        service.enqueueNotificationWithTag(pkg, mContext.getOpPackageName(), tag, id,</span><br><span class="line">                stripped, idOut, UserHandle.myUserId());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NotificationManagerService服务对象只是处理逻辑，显示的逻辑是放在系统UI的进程SystemUI中去的，所以NotificationManagerService服务对象处理完逻辑后，还需要远程调用SystemUI进程去更新显示。所以SystemUI进程需要把INotificationListener服务对象注册到NotificationManagerService服务对象中来，当需要更新UI是，就可以通过INotificationListener服务对象回调SystemUI进程中的方法来更新。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">/android/frameworks/base/services/core/java/com/android/server/notification/NotificationManagerService.java </span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">mListeners = <span class="keyword">new</span> NotificationListeners();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> IBinder mService = <span class="keyword">new</span> INotificationManager.Stub() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueueNotificationWithTag</span><span class="params">(String pkg, String opPkg, String tag, <span class="keyword">int</span> id,</span></span></span><br><span class="line"><span class="function"><span class="params">        Notification notification, <span class="keyword">int</span>[] idOut, <span class="keyword">int</span> userId)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    enqueueNotificationInternal(pkg, opPkg, Binder.getCallingUid(),</span><br><span class="line">            Binder.getCallingPid(), tag, id, notification, idOut, userId);<span class="comment">//添加或更新Notification</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enqueueNotificationInternal</span><span class="params">(<span class="keyword">final</span> String pkg, <span class="keyword">final</span> String opPkg, <span class="keyword">final</span> <span class="keyword">int</span> callingUid,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">final</span> <span class="keyword">int</span> callingPid, <span class="keyword">final</span> String tag, <span class="keyword">final</span> <span class="keyword">int</span> id, <span class="keyword">final</span> Notification notification,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span>[] idOut, <span class="keyword">int</span> incomingUserId)</span> </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mNotificationList) &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//调用服务管理对象mListeners来更新所有注册到mListeners中的NotificationListenerService对象</span></span><br><span class="line">mListeners.notifyPostedLocked(n, oldSbn);</span><br><span class="line"><span class="comment">//实现播放notification的铃声，使led灯亮起来或者震动等操作。buzz:嗡嗡叫，beep: 嘟嘟响，blink: 闪烁</span></span><br><span class="line">            buzzBeepBlinkLocked(r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">idOut[<span class="number">0</span>] = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotificationListeners</span> <span class="keyword">extends</span> <span class="title">ManagedServices</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyPostedLocked</span><span class="params">(StatusBarNotification sbn, StatusBarNotification oldSbn)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">final</span> ManagedServiceInfo info : mServices) &#123;</span><br><span class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                notifyPosted(info, sbnToPost, update);<span class="comment">//调用更新通知方法</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyPosted</span><span class="params">(<span class="keyword">final</span> ManagedServiceInfo info,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> StatusBarNotification sbn, NotificationRankingUpdate rankingUpdate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> INotificationListener listener = (INotificationListener)info.service;</span><br><span class="line">    StatusBarNotificationHolder sbnHolder = <span class="keyword">new</span> StatusBarNotificationHolder(sbn);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//回调NotificationListenerService对象中的方法onNotificationPosted()，在SystemUI中显示Notification</span></span><br><span class="line">        listener.onNotificationPosted(sbnHolder, rankingUpdate);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"unable to notify listener (posted): "</span> + listener, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>INotificationListener服务对象是从BaseStatusBar对象中启动的系统服务BNotificationListenerService注册到NotificationManagerService对象中的，当NotificationManagerService服务对象通过INotificationListener服务对象回调SystemUI进程中的方法时，就可以调用BaseStatusBar对象中的方法来更新UI显示了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">/android/frameworks/base/core/java/android/service/notification/NotificationListenerService.java </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">INotificationListenerWrapper</span> <span class="keyword">extends</span> <span class="title">INotificationListener</span>.<span class="title">Stub</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNotificationPosted</span><span class="params">(IStatusBarNotificationHolder sbnHolder,</span></span></span><br><span class="line"><span class="function"><span class="params">            NotificationRankingUpdate update)</span> </span>&#123;</span><br><span class="line">        StatusBarNotification sbn;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sbn = sbnHolder.get();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (mWrapper) &#123;</span><br><span class="line">            applyUpdate(update);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (sbn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    NotificationListenerService.<span class="keyword">this</span>.onNotificationPosted(sbn, mRankingMap);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    NotificationListenerService.<span class="keyword">this</span>.onNotificationRankingUpdate(mRankingMap);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"Error running onNotificationPosted"</span>, t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/android/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> NotificationListenerService mNotificationListener =</span><br><span class="line">        <span class="keyword">new</span> NotificationListenerService() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNotificationPosted</span><span class="params">(<span class="keyword">final</span> StatusBarNotification sbn,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> RankingMap rankingMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sbn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    String key = sbn.getKey();</span><br><span class="line">                    <span class="keyword">boolean</span> isUpdate = mNotificationData.get(key) != <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (isUpdate) &#123;</span><br><span class="line">                        updateNotification(sbn, rankingMap);<span class="comment">//更新Notification,</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        addNotification(sbn, rankingMap, <span class="keyword">null</span> <span class="comment">/* oldEntry */</span>);<span class="comment">//添加Notification</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>PhoneStatusBar是BaseStatusBar的子类，实现了BaseStatusBar中的相关方法，addNotification()就是其中之一，这个方法是用来添加Notification和状态栏通知图标的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line">/android/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNotification</span><span class="params">(StatusBarNotification notification, RankingMap ranking,</span></span></span><br><span class="line"><span class="function"><span class="params">        Entry oldEntry)</span> </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    Entry shadeEntry = createNotificationViews(notification);<span class="comment">//创建状态栏通知图标和通知列表行布局</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//把创建的状态栏通知图标和通知列表行布局分别添加到状态栏通知栏和通知列表NotificatioStackScrollLayout中</span></span><br><span class="line">    addNotificationViews(shadeEntry, ranking);</span><br><span class="line">    setAreThereNotifications();</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> NotificationData.<span class="function">Entry <span class="title">createNotificationViews</span><span class="params">(StatusBarNotification sbn)</span> </span>&#123;<span class="comment">//创建状态栏通知图标和通知列表行布局</span></span><br><span class="line">    <span class="keyword">final</span> StatusBarIconView iconView = createIcon(sbn);<span class="comment">//创建状态栏通知图标</span></span><br><span class="line">    <span class="keyword">if</span> (iconView == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    NotificationData.Entry entry = <span class="keyword">new</span> NotificationData.Entry(sbn, iconView);</span><br><span class="line">    <span class="keyword">if</span> (!inflateViews(entry, mStackScroller)) &#123;<span class="comment">//创建展开通知布局列表中的通知一行的布局</span></span><br><span class="line">        handleNotificationError(sbn, <span class="string">"Couldn't expand RemoteViews for: "</span> + sbn);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> entry;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> StatusBarIconView <span class="title">createIcon</span><span class="params">(StatusBarNotification sbn)</span> </span>&#123;<span class="comment">//创建状态栏通知图标</span></span><br><span class="line">    Notification n = sbn.getNotification();</span><br><span class="line">    <span class="keyword">final</span> StatusBarIconView iconView = <span class="keyword">new</span> StatusBarIconView(mContext,</span><br><span class="line">            sbn.getPackageName() + <span class="string">"/0x"</span> + Integer.toHexString(sbn.getId()), n);<span class="comment">//创建状态栏通知图标布局View</span></span><br><span class="line">    iconView.setScaleType(ImageView.ScaleType.CENTER_INSIDE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Icon smallIcon = n.getSmallIcon();</span><br><span class="line">    <span class="keyword">if</span> (smallIcon == <span class="keyword">null</span>) &#123;</span><br><span class="line">        handleNotificationError(sbn,</span><br><span class="line">                <span class="string">"No small icon in notification from "</span> + sbn.getPackageName());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> StatusBarIcon ic = <span class="keyword">new</span> StatusBarIcon(</span><br><span class="line">            sbn.getUser(),</span><br><span class="line">            sbn.getPackageName(),</span><br><span class="line">            smallIcon,</span><br><span class="line">            n.iconLevel,</span><br><span class="line">            n.number,</span><br><span class="line">            n.tickerText);</span><br><span class="line">    <span class="keyword">if</span> (!iconView.set(ic)) &#123;<span class="comment">//把StatusBarIcon传到状态栏通知图标布局View中</span></span><br><span class="line">        handleNotificationError(sbn, <span class="string">"Couldn't create icon: "</span> + ic);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> iconView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">inflateViews</span><span class="params">(Entry entry, ViewGroup parent)</span> </span>&#123;<span class="comment">//创建展开通知布局列表中的通知一行的布局</span></span><br><span class="line">    <span class="keyword">final</span> StatusBarNotification sbn = entry.notification;</span><br><span class="line"></span><br><span class="line">    RemoteViews contentView = sbn.getNotification().contentView;  <span class="comment">//通知布局的contentView布局</span></span><br><span class="line">    RemoteViews bigContentView = sbn.getNotification().bigContentView;  <span class="comment">//通知布局的bigContentView布局</span></span><br><span class="line">    RemoteViews headsUpContentView = sbn.getNotification().headsUpContentView;<span class="comment">//通知布局的headsUpContentView布局</span></span><br><span class="line"></span><br><span class="line">    Notification publicNotification = sbn.getNotification().publicVersion;</span><br><span class="line"></span><br><span class="line">    ExpandableNotificationRow row;<span class="comment">//创建通知布局列表中的一行的布局</span></span><br><span class="line">    <span class="keyword">if</span> (entry.row != <span class="keyword">null</span>) &#123;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(</span><br><span class="line">                Context.LAYOUT_INFLATER_SERVICE);</span><br><span class="line">        row = (ExpandableNotificationRow) inflater.inflate(R.layout.status_bar_notification_row,</span><br><span class="line">                parent, <span class="keyword">false</span>);</span><br><span class="line">        row.setExpansionLogger(<span class="keyword">this</span>, entry.notification.getKey());</span><br><span class="line">        row.setGroupManager(mGroupManager);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    NotificationContentView contentContainer = row.getPrivateLayout();</span><br><span class="line">    NotificationContentView contentContainerPublic = row.getPublicLayout();</span><br><span class="line">    NotificationContentView expandedKnox = row.getKnoxLayout();</span><br><span class="line"></span><br><span class="line">    mNotificationClicker.register(row, sbn);</span><br><span class="line"></span><br><span class="line">    View contentViewLocal = <span class="keyword">null</span>;</span><br><span class="line">    View bigContentViewLocal = <span class="keyword">null</span>;</span><br><span class="line">    View headsUpContentViewLocal = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        contentViewLocal = contentView.apply(</span><br><span class="line">                sbn.getPackageContext(mContext),</span><br><span class="line">                contentContainer,</span><br><span class="line">                mOnClickHandler);<span class="comment">//把contentView添加到通知布局列表中通知行容器中</span></span><br><span class="line">        <span class="keyword">if</span> (bigContentView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            bigContentViewLocal = bigContentView.apply(</span><br><span class="line">                    sbn.getPackageContext(mContext),</span><br><span class="line">                    contentContainer,</span><br><span class="line">                    mOnClickHandler);<span class="comment">//把bigContentView添加到通知布局列表中通知行容器中</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (headsUpContentView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            headsUpContentViewLocal = headsUpContentView.apply(</span><br><span class="line">                    sbn.getPackageContext(mContext),</span><br><span class="line">                    contentContainer,</span><br><span class="line">                    mOnClickHandler);<span class="comment">//把headsUpContentView添加到通知布局列表中通知行容器中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    View publicViewLocal = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (publicNotification != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            publicViewLocal = publicNotification.contentView.apply(</span><br><span class="line">                    sbn.getPackageContext(mContext),</span><br><span class="line">                    contentContainerPublic, mOnClickHandler);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">            publicViewLocal = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把创建的状态栏通知图标和通知列表行布局分别添加到状态栏通知栏和通知列表NotificatioStackScrollLayout中</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addNotificationViews</span><span class="params">(Entry entry, RankingMap ranking)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (entry == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mNotificationData.add(entry, ranking);<span class="comment">//先把通知添加到NotificationData中去</span></span><br><span class="line">    updateNotifications();<span class="comment">//根据更新后的NotificationData数据更新状态栏通知图标和通知列表NotificationStackScrollLayout布局</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">updateNotifications</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mNotificationData.filterAndSort();<span class="comment">//过滤和排序通知的顺序</span></span><br><span class="line"></span><br><span class="line">    updateNotificationShade();<span class="comment">//添加或者更新NotificationStackScrollLayout中的Notification</span></span><br><span class="line">    mIconController.updateNotificationIcons(mNotificationData);<span class="comment">//添加或者更新状态栏左上角通知栏图标</span></span><br><span class="line"></span><br><span class="line">    mNotificationPanel.updateCarrierAndClearLayout();<span class="comment">//更新通信类型和清除布局</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateNotificationShade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Entry&gt; activeNotifications = mNotificationData.getActiveNotifications();</span><br><span class="line">    ArrayList&lt;ExpandableNotificationRow&gt; toShow = <span class="keyword">new</span> ArrayList&lt;&gt;(activeNotifications.size());</span><br><span class="line">    </span><br><span class="line"><span class="comment">//把所有需要显示的Notification添加到toShow列表中</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> N = activeNotifications.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        Entry ent = activeNotifications.get(i);</span><br><span class="line">        toShow.add(ent.row);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过判断mStackScroller中各个child是否在toShow列表；不在的话，就添加toRemove列表中，待会一起删除</span></span><br><span class="line">    ArrayList&lt;View&gt; toRemove = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; mStackScroller.getChildCount(); i++) &#123;</span><br><span class="line">        View child = mStackScroller.getChildAt(i);</span><br><span class="line">        <span class="keyword">if</span> (!toShow.contains(child) &amp;&amp; child <span class="keyword">instanceof</span> ExpandableNotificationRow) &#123;<span class="comment">//child是否在toShow列表</span></span><br><span class="line">            toRemove.add(child);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把toRemove列表中需要删除的child，都删除掉</span></span><br><span class="line">    <span class="keyword">for</span> (View remove : toRemove) &#123;</span><br><span class="line">        mStackScroller.removeView(remove);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断toShow列表中，有哪些是新添加的通知(可以通过通知View是否有父容器来判断)，新的通知就添加到mStackScroller中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;toShow.size(); i++) &#123;</span><br><span class="line">        View v = toShow.get(i);</span><br><span class="line">        <span class="keyword">if</span> (v.getParent() == <span class="keyword">null</span>) &#123;<span class="comment">//这里通过通知View是否有父容器来判断这条通知是否是新的</span></span><br><span class="line">            mStackScroller.addView(v);<span class="comment">//新通知就添加到mStackScroller中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以上已经把需要显示或者删除的通知都处理完了，但是还需要重新调整顺序</span></span><br><span class="line"><span class="comment">//从mStackScroller中顺序判断每个child的顺序是否与toShow列表中的顺序一样</span></span><br><span class="line"><span class="comment">//不一样的，就把顺序调整下</span></span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mStackScroller.getChildCount(); i++) &#123;</span><br><span class="line">        View child = mStackScroller.getChildAt(i);</span><br><span class="line">        ExpandableNotificationRow targetChild = toShow.get(j);</span><br><span class="line">        <span class="keyword">if</span> (child != targetChild) &#123;<span class="comment">//顺序不对</span></span><br><span class="line">            mStackScroller.changeViewPosition(targetChild, i);<span class="comment">//调整顺序</span></span><br><span class="line">        &#125;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    updateNotificationShadeForChildren();<span class="comment">//更新每个Group Notification中的child Notification</span></span><br><span class="line">    updateRowStates();<span class="comment">//更新Notification布局中的Item展开情况、dim情况和锁屏状态下的通知布局情况，很重要的一个方法</span></span><br><span class="line">    updateClearAll();<span class="comment">//更新清楚所有按钮布局</span></span><br><span class="line">    updateEmptyShadeView();<span class="comment">//隐藏"No Notification"</span></span><br><span class="line">    updateQsExpansionEnabled();<span class="comment">//关闭QS功能</span></span><br><span class="line">    mShadeUpdates.check();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/android/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/NotificationData.java </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">filterAndSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mSortedAndFiltered.clear();<span class="comment">//清除mSortedAndFiltered列表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> N = mEntries.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        Entry entry = mEntries.valueAt(i);</span><br><span class="line">        StatusBarNotification sbn = entry.notification;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (shouldFilterOut(sbn)) &#123;<span class="comment">//判断是否需要过滤掉</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mSortedAndFiltered.add(entry);<span class="comment">//添加到mSortedAndFiltered列表中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Collections.sort(mSortedAndFiltered, mRankingComparator);<span class="comment">//重新排序mSortedAndFiltered中的选项</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StatusBarIconController是状态栏图标控制的类，用来控制状态栏通知图标显示和系统图标显示等等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">/android/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarIconController.java </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> IconMerger mNotificationIcons;<span class="comment">//状态栏通知图标容器对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StatusBarIconController</span><span class="params">(Context context, View statusBar, View keyguardStatusBar,</span></span></span><br><span class="line"><span class="function"><span class="params">        PhoneStatusBar phoneStatusBar)</span> </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    mNotificationIcons = (IconMerger) statusBar.findViewById(R.id.notificationIcons);<span class="comment">//获取状态栏图标的容器类</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateNotificationIcons</span><span class="params">(NotificationData notificationData)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> iconSize = mContext.getResources().getDimensionPixelSize(R.dimen.notification_icon_view_width);<span class="comment">//图标宽度</span></span><br><span class="line">    <span class="keyword">final</span> LinearLayout.LayoutParams params = <span class="keyword">new</span> LinearLayout.LayoutParams(</span><br><span class="line">            iconSize + <span class="number">2</span>*mIconHPadding, mPhoneStatusBar.getStatusBarHeight());<span class="comment">//状态栏图标的布局参数(宽度x高度)</span></span><br><span class="line"></span><br><span class="line">    ArrayList&lt;NotificationData.Entry&gt; activeNotifications =</span><br><span class="line">            notificationData.getActiveNotifications();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> N = activeNotifications.size();</span><br><span class="line">    ArrayList&lt;StatusBarIconView&gt; toShow = <span class="keyword">new</span> ArrayList&lt;&gt;(N);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把所有需要显示的Notification添加到toShow列表中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        NotificationData.Entry ent = activeNotifications.get(i);</span><br><span class="line"><span class="comment">//过滤环境通知，例如：插USB或者充电线时的通知，是不需要显示状态栏中的图标的</span></span><br><span class="line">        <span class="keyword">if</span> (notificationData.isAmbient(ent.key)</span><br><span class="line">                &amp;&amp; !NotificationData.showNotificationEvenIfUnprovisioned(ent.notification)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!PhoneStatusBar.isTopLevelChild(ent)) &#123;<span class="comment">//过滤分组的组图标</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((ent.notification.getNotification().secFlags</span><br><span class="line">                &amp; Notification.SEC_FLAG_HIDE_NOTIFICATION_ICON) !=<span class="number">0</span>) &#123;<span class="comment">//过滤掉设置了隐藏状态栏图标的通知</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!mPhoneStatusBar.shouldShowOnIndicator(ent.notification.getKey())) &#123;<span class="comment">//过滤设置了隐藏图标的包的通知</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        toShow.add(ent.icon);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过判断mNotificationIcons中各个child是否在toShow列表；不在的话，就添加toRemove列表中，待会一起删除</span></span><br><span class="line">    ArrayList&lt;View&gt; toRemove = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;mNotificationIcons.getChildCount(); i++) &#123;</span><br><span class="line">        View child = mNotificationIcons.getChildAt(i);</span><br><span class="line">        <span class="keyword">if</span> (!toShow.contains(child)) &#123;<span class="comment">//child是否在toShow列表</span></span><br><span class="line">            toRemove.add(child);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把toRemove列表中需要删除的child，都删除掉</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> toRemoveCount = toRemove.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; toRemoveCount; i++) &#123;</span><br><span class="line">        mNotificationIcons.removeView(toRemove.get(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断toShow列表中，有哪些是新添加的通知(可以通过通知View是否有父容器来判断)，新的通知就添加到mNotificationIcons中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;toShow.size(); i++) &#123;</span><br><span class="line">        View v = toShow.get(i);</span><br><span class="line">        <span class="keyword">if</span> (v.getParent() == <span class="keyword">null</span>) &#123;<span class="comment">//这里通过通知View是否有父容器来判断这条通知是否是新的</span></span><br><span class="line">            mNotificationIcons.addView(v, i, params);<span class="comment">//新通知就添加到mStackScroller中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以上已经把需要显示或者删除的通知都处理完了，但是还需要重新调整顺序</span></span><br><span class="line"><span class="comment">//从mNotificationIcons中顺序判断每个child的顺序是否与toShow列表中的顺序一样</span></span><br><span class="line"><span class="comment">//不一样的，就把顺序调整下</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childCount = mNotificationIcons.getChildCount();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">        View actual = mNotificationIcons.getChildAt(i);</span><br><span class="line">        StatusBarIconView expected = toShow.get(i);</span><br><span class="line">        <span class="keyword">if</span> (actual == expected) &#123;<span class="comment">//顺序正确的就不处理</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mNotificationIcons.removeView(expected);<span class="comment">//把顺序错误的View先删除</span></span><br><span class="line">        mNotificationIcons.addView(expected, i);<span class="comment">//再添加到正确的顺序位置上</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    applyNotificationIconsTint();<span class="comment">//更新状态栏图标的颜色</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/android/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/IconMerger.java </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IconMerger</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span></span>&#123;<span class="comment">//状态栏通知图标容器类</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把状态栏通知图标和通知行布局都分别添加到相应的容器类后，显示部分的逻辑也就完成了。</p><h1 id="Notification通知提示音响起过程"><a href="#Notification通知提示音响起过程" class="headerlink" title="Notification通知提示音响起过程"></a>Notification通知提示音响起过程</h1><p>SystemUI的RingtonePlayer服务通过IAudioService.setRingtonePlayer(IRingtonePlayer)把IRingtonePlayer实现的回调接口对象注册到AudioService服务中，第三方App调用NotificationManager.notify()时，会调用NotificationManagerService中的enqueueNotificationInternal方法中的buzzBeepBlinkLocked()方法，这个方法会通过IAudioService.getRingtonePlayer()获取AudioServoce中的IRingtonePlayer对象，并调用回调方法来调用SystenUI.RingtonePlayer.mCallback的playAsync()来实现播放notification铃声、震动、闪烁灯功能。</p><h3 id="调用过程如下图所示：-1"><a href="#调用过程如下图所示：-1" class="headerlink" title="调用过程如下图所示："></a>调用过程如下图所示：</h3><img src="/2017/03/19/Notification框架简介/时序图2.jpg" title="时序图2"><h3 id="对应的代码，如以下所示：-1"><a href="#对应的代码，如以下所示：-1" class="headerlink" title="对应的代码，如以下所示："></a>对应的代码，如以下所示：</h3><p>启动AudioService服务过程，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/android/frameworks/base/services/java/com/android/server/SystemServer.java </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startOtherServices</span><span class="params">()</span> </span>&#123;</span><br><span class="line">AudioService audioService = <span class="keyword">null</span>;</span><br><span class="line">audioService = <span class="keyword">new</span> AudioService(context);</span><br><span class="line">ServiceManager.addService(Context.AUDIO_SERVICE, audioService);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/android/frameworks/base/services/core/java/com/android/server/audio/AudioService.java </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AudioService</span> <span class="keyword">extends</span> <span class="title">IAudioService</span>.<span class="title">Stub</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> IRingtonePlayer mRingtonePlayer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRingtonePlayer</span><span class="params">(IRingtonePlayer player)</span> </span>&#123;</span><br><span class="line">        mContext.enforceCallingOrSelfPermission(REMOTE_AUDIO_PLAYBACK, <span class="keyword">null</span>);</span><br><span class="line">        mRingtonePlayer = player;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRingtonePlayer <span class="title">getRingtonePlayer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mRingtonePlayer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动SystemUI的RingtonePlayer服务过程，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/android/frameworks/base/packages/SystemUI/src/com/android/systemui/SystemUIApplication.java </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt;[] SERVICES = <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">        com.android.systemui.tuner.TunerService.class,</span><br><span class="line">        com.android.systemui.keyguard.KeyguardViewMediator.class,</span><br><span class="line">        com.android.systemui.recents.Recents.class,</span><br><span class="line">        com.android.systemui.volume.VolumeUI.class,</span><br><span class="line">        com.android.systemui.statusbar.SystemBars.class,</span><br><span class="line">        com.android.systemui.usb.StorageNotification.class,</span><br><span class="line">        com.android.systemui.power.PowerUI.class,</span><br><span class="line">        com.android.systemui.media.RingtonePlayer.class,<span class="comment">//RingtinePlayer服务</span></span><br><span class="line">        com.android.systemui.keyboard.KeyboardUI.class,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startServicesIfNeeded</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> N = SERVICES.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        Class&lt;?&gt; cl = SERVICES[i];</span><br><span class="line">        mServices[i] = (SystemUI)cl.newInstance();</span><br><span class="line">        mServices[i].mContext = <span class="keyword">this</span>;</span><br><span class="line">        mServices[i].mComponents = mComponents;</span><br><span class="line">        mServices[i].start();<span class="comment">//启动RingtinePlayer服务</span></span><br><span class="line">        <span class="keyword">if</span> (mBootCompleted) &#123;</span><br><span class="line">            mServices[i].onBootCompleted();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RingtonePlayer是运行在SystemUI进程的服务，RingtonePlayer服务会获取AudioService服务对象，并把IRingtonePlayer对象传给AudioService服务对象中去，其它模块通过AudioService.getRingtonePlayer()来控制RingtonePlayer服务播放提示音的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> IRingtonePlayer mCallback = <span class="keyword">new</span> IRingtonePlayer.Stub() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(IBinder token, Uri uri, AudioAttributes aa, <span class="keyword">float</span> volume, <span class="keyword">boolean</span> looping)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        Client client;</span><br><span class="line">        <span class="keyword">synchronized</span> (mClients) &#123;</span><br><span class="line">            client = mClients.get(token);</span><br><span class="line">            <span class="keyword">if</span> (client == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> UserHandle user = Binder.getCallingUserHandle();</span><br><span class="line">                client = <span class="keyword">new</span> Client(token, uri, user, aa);</span><br><span class="line">                token.linkToDeath(client, <span class="number">0</span>);</span><br><span class="line">                mClients.put(token, client);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        client.mRingtone.setLooping(looping);</span><br><span class="line">        client.mRingtone.setVolume(volume);</span><br><span class="line">        client.mRingtone.play();<span class="comment">//同步播放提示音</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">(IBinder token)</span> </span>&#123;</span><br><span class="line">        Client client;</span><br><span class="line">        <span class="keyword">synchronized</span> (mClients) &#123;</span><br><span class="line">            client = mClients.remove(token);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (client != <span class="keyword">null</span>) &#123;</span><br><span class="line">            client.mToken.unlinkToDeath(client, <span class="number">0</span>);</span><br><span class="line">            client.mRingtone.stop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPlaying</span><span class="params">(IBinder token)</span> </span>&#123;</span><br><span class="line">        Client client;</span><br><span class="line">        <span class="keyword">synchronized</span> (mClients) &#123;</span><br><span class="line">            client = mClients.get(token);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (client != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> client.mRingtone.isPlaying();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPlaybackProperties</span><span class="params">(IBinder token, <span class="keyword">float</span> volume, <span class="keyword">boolean</span> looping)</span> </span>&#123;</span><br><span class="line">        Client client;</span><br><span class="line">        <span class="keyword">synchronized</span> (mClients) &#123;</span><br><span class="line">            client = mClients.get(token);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (client != <span class="keyword">null</span>) &#123;</span><br><span class="line">            client.mRingtone.setVolume(volume);</span><br><span class="line">            client.mRingtone.setLooping(looping);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playAsync</span><span class="params">(Uri uri, UserHandle user, <span class="keyword">boolean</span> looping, AudioAttributes aa)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Binder.getCallingUid() != Process.SYSTEM_UID) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(<span class="string">"Async playback only available from system UID."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mAsyncPlayer.play(getContextForUser(user), uri, looping, aa);<span class="comment">//把播放任务放到异步队列中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopAsync</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (LOGD) Log.d(TAG, <span class="string">"stopAsync()"</span>);</span><br><span class="line">        <span class="keyword">if</span> (Binder.getCallingUid() != Process.SYSTEM_UID) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(<span class="string">"Async playback only available from system UID."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mAsyncPlayer.stop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">(Uri uri)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> UserHandle user = Binder.getCallingUserHandle();</span><br><span class="line">        <span class="keyword">return</span> Ringtone.getTitle(getContextForUser(user), uri,</span><br><span class="line">                <span class="keyword">false</span> <span class="comment">/*followSettingsUri*/</span>, <span class="keyword">false</span> <span class="comment">/*allowRemote*/</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">setOnCompletionListener</span><span class="params">(INotificationPlayerOnCompletionListener l)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Binder.getCallingUid() != Process.SYSTEM_UID) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(</span><br><span class="line">                    <span class="string">"setOnCompletionListener only available from system UID."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mAsyncPlayer.setOnCompletionListener(l);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果需要调用异步方式来播放提示音，就需要用到NotificationPlayer这个类，它会把播放任务保存到队列中，通过线程一个一个为队列中每个提示音播放任务创建一个播放线程并执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line">/android/frameworks/base/packages/SystemUI/src/com/android/systemui/media/NotificationPlayer.java </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Command</span> </span>&#123;<span class="comment">//一个异步任务对应一个Command对象</span></span><br><span class="line">    <span class="keyword">int</span> code;</span><br><span class="line">    Context context;</span><br><span class="line">    Uri uri;</span><br><span class="line">    <span class="keyword">boolean</span> looping;</span><br><span class="line">    AudioAttributes attributes;</span><br><span class="line">    <span class="keyword">long</span> requestTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> LinkedList&lt;Command&gt; mCmdQueue = <span class="keyword">new</span> LinkedList();<span class="comment">//异步任务队列对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(Context context, Uri uri, <span class="keyword">boolean</span> looping, AudioAttributes attributes)</span> </span>&#123;</span><br><span class="line">    Command cmd = <span class="keyword">new</span> Command();</span><br><span class="line">    cmd.requestTime = SystemClock.uptimeMillis();</span><br><span class="line">    cmd.code = PLAY;</span><br><span class="line">    cmd.context = context;</span><br><span class="line">    cmd.uri = uri;</span><br><span class="line">    cmd.looping = looping;</span><br><span class="line">    cmd.attributes = attributes;</span><br><span class="line">    <span class="keyword">synchronized</span> (mCmdQueue) &#123;</span><br><span class="line">        enqueueLocked(cmd);<span class="comment">//把异步任务加入队列中</span></span><br><span class="line">        mState = PLAY;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">enqueueLocked</span><span class="params">(Command cmd)</span> </span>&#123;</span><br><span class="line">    mCmdQueue.add(cmd);<span class="comment">//把异步任务加入队列对象mCmdQueue中</span></span><br><span class="line">    <span class="keyword">if</span> (mThread == <span class="keyword">null</span>) &#123;<span class="comment">//如果执行任务线程已经停止，创建线程并开始执行</span></span><br><span class="line">        acquireWakeLock();</span><br><span class="line">        mThread = <span class="keyword">new</span> CmdThread();<span class="comment">//创建执行任务的线程</span></span><br><span class="line">        mThread.start();<span class="comment">//启动线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CmdThread</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Thread</span> </span>&#123;</span><br><span class="line">    CmdThread() &#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"NotificationPlayer-"</span> + mTag);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Command cmd = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (mCmdQueue) &#123;</span><br><span class="line">                cmd = mCmdQueue.removeFirst();<span class="comment">//取出队列中第一个任务</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (cmd.code) &#123;<span class="comment">//任务类型</span></span><br><span class="line">            <span class="keyword">case</span> PLAY:<span class="comment">//播放提示音任务</span></span><br><span class="line">                startSound(cmd);<span class="comment">//播放提示音</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> STOP:<span class="comment">//停止提示音任务</span></span><br><span class="line">                <span class="keyword">if</span> (mPlayer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">long</span> delay = SystemClock.uptimeMillis() - cmd.requestTime;</span><br><span class="line">                    <span class="keyword">if</span> (delay &gt; <span class="number">1000</span>) &#123;<span class="comment">//如果异步时间超过1s，打印出来，方便调试</span></span><br><span class="line">                        Log.w(mTag, <span class="string">"Notification stop delayed by "</span> + delay + <span class="string">"msecs"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    mPlayer.stop();</span><br><span class="line">                    mPlayer.release();</span><br><span class="line">                    mPlayer = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">synchronized</span>(mQueueAudioFocusLock) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (mAudioManagerWithAudioFocus != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            mAudioManagerWithAudioFocus.abandonAudioFocus(<span class="keyword">null</span>);</span><br><span class="line">                            mAudioManagerWithAudioFocus = <span class="keyword">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>((mLooper != <span class="keyword">null</span>)</span><br><span class="line">                            &amp;&amp; (mLooper.getThread().getState() != Thread.State.TERMINATED)) &#123;</span><br><span class="line">                        mLooper.quit();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Log.w(mTag, <span class="string">"STOP command without a player"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (mCmdQueue) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mCmdQueue.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                    mThread = <span class="keyword">null</span>;</span><br><span class="line">                    releaseWakeLock();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startSound</span><span class="params">(Command cmd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(mCompletionHandlingLock) &#123;</span><br><span class="line">            <span class="keyword">if</span>((mLooper != <span class="keyword">null</span>)</span><br><span class="line">                    &amp;&amp; (mLooper.getThread().getState() != Thread.State.TERMINATED)) &#123;</span><br><span class="line">                mLooper.quit();</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//为每个播放任务创建一个播放提示音线程</span></span><br><span class="line">            mCompletionThread = <span class="keyword">new</span> CreationAndCompletionThread(cmd);</span><br><span class="line">            <span class="keyword">synchronized</span>(mCompletionThread) &#123;</span><br><span class="line">                mCompletionThread.start();<span class="comment">//开始执行线程</span></span><br><span class="line">                mCompletionThread.wait();<span class="comment">//等待线程执行完</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> delay = SystemClock.uptimeMillis() - cmd.requestTime;</span><br><span class="line">        <span class="keyword">if</span> (delay &gt; <span class="number">1000</span>) &#123;<span class="comment">//如果异步时间超过1s，打印出来，方便调试</span></span><br><span class="line">            Log.w(mTag, <span class="string">"Notification sound delayed by "</span> + delay + <span class="string">"msecs"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        Log.w(mTag, <span class="string">"error loading sound for "</span> + cmd.uri, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CreationAndCompletionThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Command mCmd;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CreationAndCompletionThread</span><span class="params">(Command cmd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        mCmd = cmd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Looper.prepare();</span><br><span class="line">        mLooper = Looper.myLooper();</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            AudioManager audioManager =</span><br><span class="line">                (AudioManager) mCmd.context.getSystemService(Context.AUDIO_SERVICE);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                MediaPlayer player = <span class="keyword">new</span> MediaPlayer();<span class="comment">//创建一个MediaPlayer对象</span></span><br><span class="line">                player.setAudioAttributes(mCmd.attributes);</span><br><span class="line">                player.setDataSource(mCmd.context, mCmd.uri);</span><br><span class="line">                player.setLooping(mCmd.looping);</span><br><span class="line">                player.prepare();</span><br><span class="line">                <span class="keyword">if</span> ((mCmd.uri != <span class="keyword">null</span>) &amp;&amp; (mCmd.uri.getEncodedPath() != <span class="keyword">null</span>)</span><br><span class="line">                        &amp;&amp; (mCmd.uri.getEncodedPath().length() &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!audioManager.isMusicActiveRemotely()) &#123;</span><br><span class="line">                        <span class="keyword">synchronized</span>(mQueueAudioFocusLock) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (mAudioManagerWithAudioFocus == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (mDebug) Log.d(mTag, <span class="string">"requesting AudioFocus"</span>);</span><br><span class="line">                                <span class="keyword">if</span> (mCmd.looping) &#123;<span class="comment">//获取长时间音频焦点</span></span><br><span class="line">                                    audioManager.requestAudioFocus(<span class="keyword">null</span>,</span><br><span class="line">                                            AudioAttributes.toLegacyStreamType(mCmd.attributes),</span><br><span class="line">                                            AudioManager.AUDIOFOCUS_GAIN);</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;<span class="comment">//获取临时音频焦点</span></span><br><span class="line">                                    audioManager.requestAudioFocus(<span class="keyword">null</span>,</span><br><span class="line">                                            AudioAttributes.toLegacyStreamType(mCmd.attributes),</span><br><span class="line">                                            AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK);</span><br><span class="line">                                &#125;</span><br><span class="line">                                mAudioManagerWithAudioFocus = audioManager;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (mDebug) Log.d(mTag, <span class="string">"AudioFocus was previously requested"</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                player.setOnCompletionListener(NotificationPlayer.<span class="keyword">this</span>);</span><br><span class="line">                player.setOnErrorListener(NotificationPlayer.<span class="keyword">this</span>);</span><br><span class="line">                player.start();<span class="comment">//开始播放提示音</span></span><br><span class="line">                <span class="keyword">if</span> (mPlayer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mPlayer.release();</span><br><span class="line">                &#125;</span><br><span class="line">                mPlayer = player;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                Log.w(mTag, <span class="string">"error loading sound for "</span> + mCmd.uri, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.notify();</span><br><span class="line">        &#125;</span><br><span class="line">        Looper.loop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>应用或者服务通过NotificationManager调用notify()发出通过，NotificationManager通过和NotificationManagerService服务通信，调用发出通知，并调用buzzBeepBlinkLocked()方法来触发通知提示音、震动或者led闪烁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line">/android/frameworks/base/core/java/android/app/NotificationManager.java</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(<span class="keyword">int</span> id, Notification notification)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    notify(<span class="keyword">null</span>, id, notification);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(String tag, <span class="keyword">int</span> id, Notification notification)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">INotificationManager service = getService();</span><br><span class="line">    service.enqueueNotificationWithTag(pkg, mContext.getOpPackageName(), tag, id,</span><br><span class="line">            stripped, idOut, UserHandle.myUserId());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/android/frameworks/base/services/core/java/com/android/server/notification/NotificationManagerService.java </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> IBinder mService = <span class="keyword">new</span> INotificationManager.Stub() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueueNotificationWithTag</span><span class="params">(String pkg, String opPkg, String tag, <span class="keyword">int</span> id,</span></span></span><br><span class="line"><span class="function"><span class="params">            Notification notification, <span class="keyword">int</span>[] idOut, <span class="keyword">int</span> userId)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line"></span><br><span class="line">        enqueueNotificationInternal(pkg, opPkg, Binder.getCallingUid(),</span><br><span class="line">                Binder.getCallingPid(), tag, id, notification, idOut, userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enqueueNotificationInternal</span><span class="params">(<span class="keyword">final</span> String pkg, <span class="keyword">final</span> String opPkg, <span class="keyword">final</span> <span class="keyword">int</span> callingUid,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> <span class="keyword">int</span> callingPid, <span class="keyword">final</span> String tag, <span class="keyword">final</span> <span class="keyword">int</span> id, <span class="keyword">final</span> Notification notification,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span>[] idOut, <span class="keyword">int</span> incomingUserId)</span> </span>&#123;</span><br><span class="line">    mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mNotificationList) &#123;</span><br><span class="line">                <span class="keyword">final</span> StatusBarNotification n = <span class="keyword">new</span> StatusBarNotification(</span><br><span class="line">                        pkg, opPkg, id, tag, callingUid, callingPid, score, notification, user);</span><br><span class="line">                NotificationRecord r = <span class="keyword">new</span> NotificationRecord(n, score);</span><br><span class="line">                NotificationRecord old = mNotificationsByKey.get(n.getKey());</span><br><span class="line"><span class="comment">//调用服务管理对象mListeners来更新所有注册到mListeners中的NotificationListenerService对象</span></span><br><span class="line">mListeners.notifyPostedLocked(n, oldSbn);</span><br><span class="line"><span class="comment">//实现播放notification的提示音，使led灯亮起来或者震动等操作。buzz:嗡嗡叫，beep: 嘟嘟响，blink: 闪烁</span></span><br><span class="line">buzzBeepBlinkLocked(r);</span><br><span class="line">&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现播放notification的提示音，使led灯亮起来或者震动等操作。buzz:嗡嗡叫，beep: 嘟嘟响，blink: 闪烁</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buzzBeepBlinkLocked</span><span class="params">(NotificationRecord record)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> buzz = <span class="keyword">false</span>;<span class="comment">//震动</span></span><br><span class="line">    <span class="keyword">boolean</span> beep = <span class="keyword">false</span>;<span class="comment">//提示音</span></span><br><span class="line">    <span class="keyword">boolean</span> blink = <span class="keyword">false</span>;<span class="comment">//闪烁</span></span><br><span class="line">    <span class="keyword">final</span> Notification notification = record.sbn.getNotification();</span><br><span class="line">    <span class="comment">// Should this notification make noise, vibe, or use the LED?</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> aboveThreshold = record.score &gt;= SCORE_INTERRUPTION_THRESHOLD;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> canInterrupt = aboveThreshold &amp;&amp; !record.isIntercepted();</span><br><span class="line">    <span class="comment">// If we're not supposed to beep, vibrate, etc. then don't.</span></span><br><span class="line">    <span class="keyword">final</span> String disableEffects = disableNotificationEffects(record);</span><br><span class="line">    <span class="keyword">if</span> (disableEffects != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ZenLog.traceDisableEffects(record, disableEffects);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">boolean</span> smsRingtone = getContext().getResources().getBoolean(</span><br><span class="line">            com.android.internal.R.bool.config_sms_ringtone_incall);</span><br><span class="line">    <span class="keyword">if</span> ((disableEffects == <span class="keyword">null</span> || (smsRingtone &amp;&amp; mInCall))<span class="comment">//通话期间来短信铃声</span></span><br><span class="line">            &amp;&amp; (!(record.isUpdate</span><br><span class="line">                &amp;&amp; (notification.flags &amp; Notification.FLAG_ONLY_ALERT_ONCE) != <span class="number">0</span> ))</span><br><span class="line">            &amp;&amp; (record.getUserId() == UserHandle.USER_ALL ||</span><br><span class="line">                record.getUserId() == currentUser ||</span><br><span class="line">                mUserProfiles.isCurrentProfile(record.getUserId()))</span><br><span class="line">            &amp;&amp; canInterrupt</span><br><span class="line">            &amp;&amp; mSystemReady</span><br><span class="line">            &amp;&amp; mAudioManager != <span class="keyword">null</span>) &#123;<span class="comment">//判断是否需要提示音或者震动</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里会发出一个Notification的AccessibilityEvent，这样在辅助服务中才能收到这个事件，</span></span><br><span class="line"><span class="comment">//微信抢红包的功能就是通过这个辅助事件才得以实现的</span></span><br><span class="line">        sendAccessibilityEvent(notification, record.sbn.getPackageName());</span><br><span class="line"></span><br><span class="line"><span class="comment">//提示音相关</span></span><br><span class="line">        <span class="keyword">if</span>(!isPrayModeNotiOn(mContext)) &#123;<span class="comment">//判断是否是在祈祷模式下</span></span><br><span class="line"><span class="comment">//判断Notification是否设置了使用默认提示音或者Notification设置的提示音文件刚好是默认提示音文件</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> useDefaultSound =</span><br><span class="line">                   (notification.defaults &amp; Notification.DEFAULT_SOUND) != <span class="number">0</span> ||</span><br><span class="line">                           Settings.System.DEFAULT_NOTIFICATION_URI</span><br><span class="line">                                   .equals(notification.sound);</span><br><span class="line">            Uri soundUri = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">boolean</span> hasValidSound = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (useDefaultSound) &#123;<span class="comment">//判断是否使用默认Notification提示音</span></span><br><span class="line">                soundUri = Settings.System.DEFAULT_NOTIFICATION_URI;<span class="comment">//获取默认提示音Uri</span></span><br><span class="line">                ContentResolver resolver = getContext().getContentResolver();</span><br><span class="line">                hasValidSound = Settings.System.getString(resolver,</span><br><span class="line">                       Settings.System.NOTIFICATION_SOUND) != <span class="keyword">null</span>;<span class="comment">//默认提示音文件是否有效</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (notification.sound != <span class="keyword">null</span>) &#123;</span><br><span class="line">                soundUri = notification.sound;<span class="comment">//获取Notification的提示音Uri</span></span><br><span class="line">                hasValidSound = (soundUri != <span class="keyword">null</span>);<span class="comment">//提示音文件是否有效</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (hasValidSound) &#123;<span class="comment">//判断是否是有效提示音</span></span><br><span class="line">                <span class="keyword">boolean</span> looping =</span><br><span class="line">                        (notification.flags &amp; Notification.FLAG_INSISTENT) != <span class="number">0</span>;  <span class="comment">//是否设置了循环</span></span><br><span class="line">                AudioAttributes audioAttributes;</span><br><span class="line">                <span class="keyword">if</span> (notification.audioAttributes != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    audioAttributes = notification.audioAttributes;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    audioAttributes = Notification.AUDIO_ATTRIBUTES_DEFAULT;</span><br><span class="line">                &#125;</span><br><span class="line">                mSoundNotificationKey = record.getKey();</span><br><span class="line">                <span class="comment">//Notification提示音音量是否为0和音频焦点是否可用</span></span><br><span class="line">                <span class="keyword">if</span> ((mAudioManager.getStreamVolume(</span><br><span class="line">                        AudioAttributes.toLegacyStreamType(audioAttributes)) != <span class="number">0</span>)</span><br><span class="line">                            &amp;&amp; !mAudioManager.isAudioFocusExclusive()) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">long</span> identity = Binder.clearCallingIdentity();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//-----这里或通过AudioService来获取IRingtonePlayer对象，最终会调用SystemUI进程中的RingtonePlayer来播放提示音</span></span><br><span class="line">                        <span class="keyword">final</span> IRingtonePlayer player = mAudioManager.getRingtonePlayer();</span><br><span class="line">                        <span class="keyword">if</span> (player != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            player.playAsync(soundUri, record.sbn.getUser(), looping,</span><br><span class="line">                                    audioAttributes);<span class="comment">//异步方式播放提示音</span></span><br><span class="line">                            beep = <span class="keyword">true</span>;</span><br><span class="line">                            mIsPlaying = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mMethodRingtonePlayer != <span class="keyword">null</span>) &#123;<span class="comment">//翻转停止播放提示音功能的相关逻辑</span></span><br><span class="line">                                <span class="keyword">if</span> (mOverTurnPlayer != <span class="keyword">null</span> &amp;&amp; mOverTurnPlayer.isEnable() &amp;&amp; !mOverTurnPlayer.isRegister()) &#123;</span><br><span class="line">                                    mOverTurnPlayer.register();</span><br><span class="line"><span class="comment">//...//翻转停止播放提示音功能的相关逻辑，这里先不赘述</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        Binder.restoreCallingIdentity(identity);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//震动相关</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> hasCustomVibrate = notification.vibrate != <span class="keyword">null</span>;<span class="comment">//Notification是否设置震动</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> convertSoundToVibration =</span><br><span class="line">                       !hasCustomVibrate</span><br><span class="line">                    &amp;&amp; hasValidSound</span><br><span class="line">                    &amp;&amp; (mAudioManager.getRingerMode()</span><br><span class="line">                               == AudioManager.RINGER_MODE_VIBRATE);<span class="comment">//震动模式下，需要把通知提示音变成震动</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> useDefaultVibrate =</span><br><span class="line">                    (notification.defaults &amp; Notification.DEFAULT_VIBRATE) != <span class="number">0</span>;<span class="comment">//Notification是否设置了默认震动</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> useHaptic = doesItUseHaptic(notification.haptic);<span class="comment">//Notification是否设置了触屏反馈</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((useDefaultVibrate || convertSoundToVibration || hasCustomVibrate ||useHaptic)</span><br><span class="line">                    &amp;&amp; !(mAudioManager.getRingerMode() == AudioManager.RINGER_MODE_SILENT)) &#123;<span class="comment">//判断是否需要震动</span></span><br><span class="line">                mVibrateNotificationKey = record.getKey();</span><br><span class="line">                buzz = <span class="keyword">true</span>;</span><br><span class="line">                doVibrate((useDefaultVibrate || convertSoundToVibration), useHaptic, notification);<span class="comment">//执行震动</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(beep || buzz) &#123;</span><br><span class="line">            AccessibilityManager accManager = AccessibilityManager.getInstance(getContext());</span><br><span class="line">            accManager.onFlashNotification(record.getNotification().category);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//led灯相关</span></span><br><span class="line">    <span class="keyword">boolean</span> wasShowLights = mLights.remove(record.getKey());</span><br><span class="line">    <span class="keyword">if</span> ((notification.flags &amp; Notification.FLAG_SHOW_LIGHTS) != <span class="number">0</span> &amp;&amp; aboveThreshold) &#123;</span><br><span class="line">        mLights.add(record.getKey());</span><br><span class="line">        updateLightsLocked();<span class="comment">//更新led灯闪烁</span></span><br><span class="line">        <span class="keyword">if</span> (mUseAttentionLight) &#123;</span><br><span class="line">            mAttentionLight.pulse();</span><br><span class="line">        &#125;</span><br><span class="line">        blink = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (wasShowLights) &#123;</span><br><span class="line">        updateLightsLocked();<span class="comment">//更新led灯闪烁</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((buzz || beep || blink) &amp;&amp; !isPrayModeNotiOn(mContext)) &#123;</span><br><span class="line">        EventLogTags.writeNotificationAlert(record.getKey(),</span><br><span class="line">                buzz ? <span class="number">1</span> : <span class="number">0</span>, beep ? <span class="number">1</span> : <span class="number">0</span>, blink ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">        mHandler.post(mBuzzBeepBlinked);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doVibrate</span><span class="params">(<span class="keyword">boolean</span> useDefaultVibrate, <span class="keyword">boolean</span> useHaptic, Notification n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (useHaptic) &#123;</span><br><span class="line">        mVibrator.vibrate(n.haptic, -<span class="number">1</span>, <span class="keyword">null</span>,</span><br><span class="line">               Vibrator.MagnitudeTypes.NotificationMagnitude);<span class="comment">//执行震动</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (useDefaultVibrate) &#123;</span><br><span class="line">        <span class="keyword">long</span> identity = Binder.clearCallingIdentity();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mVibrator.vibrate(HapticFeedbackConstants.VIBE_NOTIFICATION, -<span class="number">1</span>, <span class="keyword">null</span>,</span><br><span class="line">                    Vibrator.MagnitudeTypes.NotificationMagnitude);<span class="comment">//执行震动</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Binder.restoreCallingIdentity(identity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">long</span> identity2 = Binder.clearCallingIdentity();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mVibrator.vibrate(n.vibrate, ((n.flags &amp; Notification.FLAG_INSISTENT) != <span class="number">0</span>) ? <span class="number">0</span>: -<span class="number">1</span>, <span class="keyword">null</span>,</span><br><span class="line">                    Vibrator.MagnitudeTypes.NotificationMagnitude);<span class="comment">//执行震动</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Binder.restoreCallingIdentity(identity2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NotificationManagerService服务中就是通过AudioService服务获取IRingtonePlayer对象来控制SystemUI进程进行播放提示音的，</p><pre><code>final IRingtonePlayer player = mAudioManager.getRingtonePlayer();    player.playAsync(soundUri, record.sbn.getUser(), looping, audioAttributes);    </code></pre><p>SystemUI进程播放提示音的流程如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">/android/frameworks/base/packages/SystemUI/src/com/android/systemui/media/RingtonePlayer.java </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> NotificationPlayer mAsyncPlayer = <span class="keyword">new</span> NotificationPlayer(TAG);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> IRingtonePlayer mCallback = <span class="keyword">new</span> IRingtonePlayer.Stub() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playAsync</span><span class="params">(Uri uri, UserHandle user, <span class="keyword">boolean</span> looping, AudioAttributes aa)</span> </span>&#123;</span><br><span class="line">        mAsyncPlayer.play(getContextForUser(user), uri, looping, aa);<span class="comment">//异步播放提示音</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/android/frameworks/base/packages/SystemUI/src/com/android/systemui/media/NotificationPlayer.java </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(Context context, Uri uri, <span class="keyword">boolean</span> looping, AudioAttributes attributes)</span> </span>&#123;</span><br><span class="line">    Command cmd = <span class="keyword">new</span> Command();</span><br><span class="line">    cmd.requestTime = SystemClock.uptimeMillis();</span><br><span class="line">    cmd.code = PLAY;</span><br><span class="line">    cmd.context = context;</span><br><span class="line">    cmd.uri = uri;</span><br><span class="line">    cmd.looping = looping;</span><br><span class="line">    cmd.attributes = attributes;</span><br><span class="line">    <span class="keyword">synchronized</span> (mCmdQueue) &#123;</span><br><span class="line">        enqueueLocked(cmd);<span class="comment">//把异步播放提示音放到播放任务队列中</span></span><br><span class="line">        mState = PLAY;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">enqueueLocked</span><span class="params">(Command cmd)</span> </span>&#123;</span><br><span class="line">    mCmdQueue.add(cmd);</span><br><span class="line">    <span class="keyword">if</span> (mThread == <span class="keyword">null</span>) &#123;</span><br><span class="line">        acquireWakeLock();</span><br><span class="line">        mThread = <span class="keyword">new</span> CmdThread();<span class="comment">//创建处理队列任务的线程</span></span><br><span class="line">        mThread.start();<span class="comment">//启动线程开始处理队列中的任务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CmdThread</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Command cmd = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">synchronized</span> (mCmdQueue) &#123;</span><br><span class="line">                cmd = mCmdQueue.removeFirst();<span class="comment">//取队列中第一条播放任务</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">switch</span> (cmd.code) &#123;</span><br><span class="line">            <span class="keyword">case</span> PLAY:</span><br><span class="line">                startSound(cmd);<span class="comment">//开始处理播放提示音任务</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startSound</span><span class="params">(Command cmd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(mCompletionHandlingLock) &#123;</span><br><span class="line">        mCompletionThread = <span class="keyword">new</span> CreationAndCompletionThread(cmd);</span><br><span class="line"><span class="keyword">synchronized</span>(mCompletionThread) &#123;</span><br><span class="line">mCompletionThread.start();<span class="comment">//执行播放提示音线程</span></span><br><span class="line">mCompletionThread.wait();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;          </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CreationAndCompletionThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Command mCmd;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CreationAndCompletionThread</span><span class="params">(Command cmd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        mCmd = cmd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Looper.prepare();</span><br><span class="line">        mLooper = Looper.myLooper();</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">MediaPlayer player = <span class="keyword">new</span> MediaPlayer();</span><br><span class="line">player.setAudioAttributes(mCmd.attributes);</span><br><span class="line">player.setDataSource(mCmd.context, mCmd.uri);</span><br><span class="line">player.setLooping(mCmd.looping);</span><br><span class="line">player.prepare();</span><br><span class="line">player.start();<span class="comment">//播放提示音</span></span><br><span class="line"><span class="keyword">if</span> (mPlayer != <span class="keyword">null</span>) &#123;</span><br><span class="line">mPlayer.release();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">Log.w(mTag, <span class="string">"error loading sound for "</span> + mCmd.uri, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.notify();</span><br><span class="line">&#125;</span><br><span class="line">Looper.loop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>要理解Notification框架的原理，需要理清NotificationManager和NotificationManagerService之间是怎么通信的，NotificationManagerService和SystemUI之间是怎么通信的。INotificationManager.Stub不仅作为NotificationManagerService和NotificationManager的远程通信方式，也是NotificationManagerService和SystemUI的远程通信方式，不过SystemUI进程会创建和启动一个系统服务NotificationListenerService，这个系统服务通过INotificationManager.Stub把INotificationListener.Stub对象远程传给NotificationListenerService服务中，让NotificationListenerService服务通过INotificationListener.Stub对象和系统服务NotificationListenerService通信，系统服务NotificationListenerService再调用SystemUI进程来更新UI。</p><img src="/2017/03/19/Notification框架简介/通信图.jpg" title="通信图">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Notification介绍&lt;/li&gt;
&lt;li&gt;Notification框架原理&lt;/li&gt;
&lt;li&gt;Notification框架
      
    
    </summary>
    
      <category term="Android" scheme="https://liangyunfeng.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://liangyunfeng.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>23种设计模式的结构图</title>
    <link href="https://liangyunfeng.github.io/2017/02/18/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E7%BB%93%E6%9E%84%E5%9B%BE/"/>
    <id>https://liangyunfeng.github.io/2017/02/18/23种设计模式的结构图/</id>
    <published>2017-02-18T14:41:21.000Z</published>
    <updated>2018-05-23T13:25:56.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h1><img src="/2017/02/18/23种设计模式的结构图/分类.png"><h1 id="Abstract-Factory（抽象工厂）"><a href="#Abstract-Factory（抽象工厂）" class="headerlink" title="Abstract Factory（抽象工厂）"></a>Abstract Factory（抽象工厂）</h1><p><strong>意图：</strong><br>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。  </p><p><strong>适用性：</strong>   </p><ul><li>一个系统要独立于它的产品的创建、组合和表示时。  </li><li>一个系统要由多个产品系列中的一个来配置时。  </li><li>当你要强调一系列相关的产品对象的设计以便进行联合使用时。  </li><li>当你提供一个产品类库，而只想显示它们的接口而不是实现时。  </li></ul><img src="/2017/02/18/23种设计模式的结构图/AbstractFactory.png"><h1 id="Builder（建造者）"><a href="#Builder（建造者）" class="headerlink" title="Builder（建造者）"></a>Builder（建造者）</h1><p><strong>意图：</strong><br>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。  </p><p><strong>适用性：</strong>  </p><ul><li>当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时。  </li><li>当构造过程必须允许被构造的对象有不同的表示时。  </li></ul><img src="/2017/02/18/23种设计模式的结构图/Builder.png"><h1 id="Factory-Method（工厂方法）"><a href="#Factory-Method（工厂方法）" class="headerlink" title="Factory Method（工厂方法）"></a>Factory Method（工厂方法）</h1><p><strong>意图：</strong><br>定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method 使一个类的实例化延迟到其子类。  </p><p><strong>适用性：</strong>  </p><ul><li>当一个类不知道它所必须创建的对象的类的时候。  </li><li>当一个类希望由它的子类来指定它所创建的对象的时候。  </li><li>当类将创建对象的职责委托给多个帮助子类中的某一个，并且你希望将哪一个帮助子类是代理者这一信息局部化的时候。  </li></ul><img src="/2017/02/18/23种设计模式的结构图/FactoryMethod.png"><h1 id="Prototype（原型）"><a href="#Prototype（原型）" class="headerlink" title="Prototype（原型）"></a>Prototype（原型）</h1><p><strong>意图：</strong><br>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。  </p><p><strong>适用性：</strong>  </p><ul><li>当一个系统应该独立于它的产品创建、构成和表示时。  </li><li>当要实例化的类时在运行时刻指定时，例如通过动态装载。  </li><li>为了避免创建一个与产品类层次平行的工厂类层次时。  </li><li>当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆它们可能比每次用合适的状态手工实例化该类更方便一些。  </li></ul><img src="/2017/02/18/23种设计模式的结构图/Prototype.png"><h1 id="Singleton（单例）"><a href="#Singleton（单例）" class="headerlink" title="Singleton（单例）"></a>Singleton（单例）</h1><p><strong>意图：</strong><br>保证一个类仅有一个实例，并提供一个访问它的全局访问点。  </p><p><strong>适用性：</strong>  </p><ul><li>当类只能有一个实例而且客户可以从一个众所周知的访问点访问它时。  </li><li>当这个唯一实例应该是通过子类化可扩展的，并且客户应该无需更改代码就能使用一个扩展的实例时。  </li></ul><img src="/2017/02/18/23种设计模式的结构图/Singleton.png"><h1 id="Adapter-Class-Object（适配器）"><a href="#Adapter-Class-Object（适配器）" class="headerlink" title="Adapter Class/Object（适配器）"></a>Adapter Class/Object（适配器）</h1><p><strong>意图：</strong><br>将一个类的接口转换成客户希望的另外一个接口。Adapter 模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。  </p><p><strong>适用性：</strong>  </p><ul><li>你想使用一个已经存在的类，而它的接口不符合你的需求。  </li><li>你想创建一个可以复用的类，该类可以与其他不相关的类或不可预见的类（即那些接口可能不一定兼容的类）协同工作。  </li><li>（仅适用于对象Adapter ）你想使用一些已经存在的子类，但是不可能对每一个都进行子类化以匹配它们的接口。对象适配器可以适配它的父类接口。  </li></ul><img src="/2017/02/18/23种设计模式的结构图/Adapter1.png"><h1 id="Bridge（桥接）"><a href="#Bridge（桥接）" class="headerlink" title="Bridge（桥接）"></a>Bridge（桥接）</h1><p><strong>意图：</strong><br>将抽象部分与它的实现部分分离，使它们都可以独立地变化。  </p><p><strong>适用性：</strong>  </p><ul><li>你不希望在抽象和它的实现部分之间有一个固定的绑定关系。例如这种情况可能是因为，在程序运行时刻实现部分应可以被选择或者切换。  </li><li>类的抽象以及它的实现都应该可以通过生成子类的方法加以扩充。这时Bridge 模式使你可以对不同的抽象接口和实现部分进行组合，并分别对它们进行扩充。  </li><li>对一个抽象的实现部分的修改应对客户不产生影响，即客户的代码不必重新编译。  </li><li>（C++）你想对客户完全隐藏抽象的实现部分。在C++中，类的表示在类接口中是可见的。  </li><li>有许多类要生成。这样一种类层次结构说明你必须将一个对象分解成两个部分。Rumbaugh 称这种类层次结构为“嵌套的普化”（nested generalizations ）。  </li><li>想在多个对象间共享实现（可能使用引用计数），但同时要求客户并不知道这一点。一个简单的例子便是Coplien 的String 类[ Cop92 ]，在这个类中多个对象可以共享同一个字符串表示（StringRep ）。  </li></ul><img src="/2017/02/18/23种设计模式的结构图/Bridge.png"><h1 id="Composite（组合）"><a href="#Composite（组合）" class="headerlink" title="Composite（组合）"></a>Composite（组合）</h1><p><strong>意图：</strong><br>将对象组合成树形结构以表示“部分-整体”的层次结构。C o m p o s i t e 使得用户对单个对象和组合对象的使用具有一致性。  </p><p><strong>适用性：</strong>  </p><ul><li>你想表示对象的部分-整体层次结构。  </li><li>你希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。  </li></ul><img src="/2017/02/18/23种设计模式的结构图/Composite.png"><h1 id="Decorator（装饰）"><a href="#Decorator（装饰）" class="headerlink" title="Decorator（装饰）"></a>Decorator（装饰）</h1><p><strong>意图：</strong><br>动态地给一个对象添加一些额外的职责。就增加功能来说，Decorator 模式相比生成子类更为灵活。  </p><p><strong>适用性：</strong>  </p><ul><li>在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。  </li><li>处理那些可以撤消的职责。  </li><li>当不能采用生成子类的方法进行扩充时。一种情况是，可能有大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长。另一种情况可能是因为类定义被隐藏，或类定义不能用于生成子类。  </li></ul><img src="/2017/02/18/23种设计模式的结构图/Decorator.png"><h1 id="Facade（外观）"><a href="#Facade（外观）" class="headerlink" title="Facade（外观）"></a>Facade（外观）</h1><p><strong>意图：</strong><br>为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。  </p><p><strong>适用性：</strong>  </p><ul><li>当你要为一个复杂子系统提供一个简单接口时。子系统往往因为不断演化而变得越来越复杂。大多数模式使用时都会产生更多更小的类。这使得子系统更具可重用性，也更容易对子系统进行定制，但这也给那些不需要定制子系统的用户带来一些使用上的困难。Facade 可以提供一个简单的缺省视图，这一视图对大多数用户来说已经足够，而那些需要更多的可定制性的用户可以越过facade层。  </li><li>客户程序与抽象类的实现部分之间存在着很大的依赖性。引入facade 将这个子系统与客户以及其他的子系统分离，可以提高子系统的独立性和可移植性。  </li><li>当你需要构建一个层次结构的子系统时，使用facade模式定义子系统中每层的入口点。如果子系统之间是相互依赖的，你可以让它们仅通过facade进行通讯，从而简化了它们之间的依赖关系。  </li></ul><img src="/2017/02/18/23种设计模式的结构图/Facade.png"><h1 id="Flyweight（享元）"><a href="#Flyweight（享元）" class="headerlink" title="Flyweight（享元）"></a>Flyweight（享元）</h1><p><strong>意图：</strong><br>运用共享技术有效地支持大量细粒度的对象。  </p><p><strong>适用性：</strong>  </p><ul><li>一个应用程序使用了大量的对象。  </li><li>完全由于使用大量的对象，造成很大的存储开销。  </li><li>对象的大多数状态都可变为外部状态。  </li><li>如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多组对象。  </li><li>应用程序不依赖于对象标识。由于Flyweight 对象可以被共享，对于概念上明显有别的对象，标识测试将返回真值。  </li></ul><img src="/2017/02/18/23种设计模式的结构图/Flyweight.png"><h1 id="Proxy（代理）"><a href="#Proxy（代理）" class="headerlink" title="Proxy（代理）"></a>Proxy（代理）</h1><p><strong>意图：</strong><br>为其他对象提供一种代理以控制对这个对象的访问。  </p><p><strong>适用性：</strong><br>在需要用比较通用和复杂的对象指针代替简单的指针的时候，使用Proxy模式。下面是一 些可以使用Proxy 模式常见情况：  </p><ul><li>远程代理（Remote Proxy ）为一个对象在不同的地址空间提供局部代表。 NEXTSTEP[Add94] 使用NXProxy 类实现了这一目的。Coplien[Cop92] 称这种代理为“大使” （Ambassador ）。  </li><li>虚代理（Virtual Proxy ）根据需要创建开销很大的对象。在动机一节描述的ImageProxy 就是这样一种代理的例子。  </li><li>保护代理（Protection Proxy ）控制对原始对象的访问。保护代理用于对象应该有不同 的访问权限的时候。例如，在Choices 操作系统[ CIRM93]中KemelProxies为操作系统对象提供 了访问保护。  </li><li>智能指引（Smart Reference ）取代了简单的指针，它在访问对象时执行一些附加操作。 它的典型用途包括：对指向实际对象的引用计数，这样当该对象没有引用时，可以自动释放它(也称为SmartPointers[Ede92 ] )。当第一次引用一个持久对象时，将它装入内存。在访问一个实际对象前，检查是否已经锁定了它，以确保其他对象不能改变它。  </li></ul><img src="/2017/02/18/23种设计模式的结构图/Proxy.png"><h1 id="Chain-of-Responsibility（责任链）"><a href="#Chain-of-Responsibility（责任链）" class="headerlink" title="Chain of Responsibility（责任链）"></a>Chain of Responsibility（责任链）</h1><p><strong>意图：</strong><br>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。  </p><p><strong>适用性：</strong>  </p><ul><li>有多个的对象可以处理一个请求，哪个对象处理该请求运行时刻自动确定。  </li><li>你想在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。  </li><li>可处理一个请求的对象集合应被动态指定。  </li></ul><img src="/2017/02/18/23种设计模式的结构图/ChainOfResponsibility.png"><h1 id="Command（命令）"><a href="#Command（命令）" class="headerlink" title="Command（命令）"></a>Command（命令）</h1><p><strong>意图：</strong><br>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤消的操作。  </p><p><strong>适用性：</strong>  </p><ul><li>抽象出待执行的动作以参数化某对象，你可用过程语言中的回调（call back）函数表达这种参数化机制。所谓回调函数是指函数先在某处注册，而它将在稍后某个需要的时候被调用。Command 模式是回调机制的一个面向对象的替代品。  </li><li>在不同的时刻指定、排列和执行请求。一个Command对象可以有一个与初始请求无关的生存期。如果一个请求的接收者可用一种与地址空间无关的方式表达，那么就可将负责该请求的命令对象传送给另一个不同的进程并在那儿实现该请求。  </li><li>支持取消操作。Command的Excute 操作可在实施操作前将状态存储起来，在取消操作时这个状态用来消除该操作的影响。Command 接口必须添加一个Unexecute操作，该操作取消上一次Execute调用的效果。执行的命令被存储在一个历史列表中。可通过向后和向前遍历这一列表并分别调用Unexecute和Execute来实现重数不限的“取消”和“重做”。  </li><li>支持修改日志，这样当系统崩溃时，这些修改可以被重做一遍。在Command接口中添加装载操作和存储操作，可以用来保持变动的一个一致的修改日志。从崩溃中恢复的过程包括从磁盘中重新读入记录下来的命令并用Execute操作重新执行它们。  </li><li>用构建在原语操作上的高层操作构造一个系统。这样一种结构在支持事务( transaction)的信息系统中很常见。一个事务封装了对数据的一组变动。Command模式提供了对事务进行建模的方法。Command有一个公共的接口，使得你可以用同一种方式调用所有的事务。同时使用该模式也易于添加新事务以扩展系统。  </li></ul><img src="/2017/02/18/23种设计模式的结构图/Command.png"><h1 id="Interpreter（解释器）"><a href="#Interpreter（解释器）" class="headerlink" title="Interpreter（解释器）"></a>Interpreter（解释器）</h1><p><strong>意图：</strong><br>给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。  </p><p><strong>适用性：</strong><br>当有一个语言需要解释执行, 并且你可将该语言中的句子表示为一个抽象语法树时，可使用解释器模式。而当存在以下情况时该模式效果最好：  </p><ul><li>该文法简单对于复杂的文法, 文法的类层次变得庞大而无法管理。此时语法分析程序生成器这样的工具是更好的选择。它们无需构建抽象语法树即可解释表达式, 这样可以节省空间而且还可能节省时间。  </li><li>效率不是一个关键问题最高效的解释器通常不是通过直接解释语法分析树实现的, 而是首先将它们转换成另一种形式。例如，正则表达式通常被转换成状态机。但即使在这种情况下, 转换器仍可用解释器模式实现, 该模式仍是有用的。  </li></ul><img src="/2017/02/18/23种设计模式的结构图/Interpreter.png"><h1 id="Iterator（迭代器）"><a href="#Iterator（迭代器）" class="headerlink" title="Iterator（迭代器）"></a>Iterator（迭代器）</h1><p><strong>意图：</strong><br>提供一种方法顺序访问一个聚合对象中各个元素, 而又不需暴露该对象的内部表示。  </p><p><strong>适用性：</strong>  </p><ul><li>访问一个聚合对象的内容而无需暴露它的内部表示。  </li><li>支持对聚合对象的多种遍历。  </li><li>为遍历不同的聚合结构提供一个统一的接口(即, 支持多态迭代)。  </li></ul><img src="/2017/02/18/23种设计模式的结构图/Iterator.png"><h1 id="Mediator（中介者）"><a href="#Mediator（中介者）" class="headerlink" title="Mediator（中介者）"></a>Mediator（中介者）</h1><p><strong>意图：</strong><br>用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。  </p><p><strong>适用性：</strong>  </p><ul><li>一组对象以定义良好但是复杂的方式进行通信。产生的相互依赖关系结构混乱且难以理解。  </li><li>一个对象引用其他很多对象并且直接与这些对象通信,导致难以复用该对象。  </li><li>想定制一个分布在多个类中的行为，而又不想生成太多的子类。  </li></ul><img src="/2017/02/18/23种设计模式的结构图/Mediator.png"><h1 id="Memento（备忘录）"><a href="#Memento（备忘录）" class="headerlink" title="Memento（备忘录）"></a>Memento（备忘录）</h1><p><strong>意图：</strong><br>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。  </p><p><strong>适用性：</strong>  </p><ul><li>必须保存一个对象在某一个时刻的(部分)状态, 这样以后需要时它才能恢复到先前的状态。  </li><li>如果一个用接口来让其它对象直接得到这些状态，将会暴露对象的实现细节并破坏对象的封装性。  </li></ul><img src="/2017/02/18/23种设计模式的结构图/Memento.png"><h1 id="Observer（观察者）"><a href="#Observer（观察者）" class="headerlink" title="Observer（观察者）"></a>Observer（观察者）</h1><p><strong>意图：</strong><br>定义对象间的一种一对多的依赖关系,当一个对象的状态发生改变时, 所有依赖于它的对象都得到通知并被自动更新。  </p><p><strong>适用性：</strong>  </p><ul><li>当一个抽象模型有两个方面, 其中一个方面依赖于另一方面。将这二者封装在独立的对象中以使它们可以各自独立地改变和复用。  </li><li>当对一个对象的改变需要同时改变其它对象, 而不知道具体有多少对象有待改变。  </li><li>当一个对象必须通知其它对象，而它又不能假定其它对象是谁。换言之, 你不希望这些对象是紧密耦合的。  </li></ul><img src="/2017/02/18/23种设计模式的结构图/Observer.png"><h1 id="State（状态）"><a href="#State（状态）" class="headerlink" title="State（状态）"></a>State（状态）</h1><p><strong>意图：</strong><br>允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类。  </p><p><strong>适用性：</strong>  </p><ul><li>一个对象的行为取决于它的状态, 并且它必须在运行时刻根据状态改变它的行为。  </li><li>一个操作中含有庞大的多分支的条件语句，且这些分支依赖于该对象的状态。这个状态通常用一个或多个枚举常量表示。通常, 有多个操作包含这一相同的条件结构。State模式将每一个条件分支放入一个独立的类中。这使得你可以根据对象自身的情况将对象的状态作为一个对象，这一对象可以不依赖于其他对象而独立变化。  </li></ul><img src="/2017/02/18/23种设计模式的结构图/State.png"><h1 id="Strategy（策略）"><a href="#Strategy（策略）" class="headerlink" title="Strategy（策略）"></a>Strategy（策略）</h1><p><strong>意图：</strong><br>定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。  </p><p><strong>适用性：</strong>  </p><ul><li>许多相关的类仅仅是行为有异。“策略”提供了一种用多个行为中的一个行为来配置一个类的方法。  </li><li>需要使用一个算法的不同变体。例如，你可能会定义一些反映不同的空间/时间权衡的算法。当这些变体实现为一个算法的类层次时 ,可以使用策略模式。  </li><li>算法使用客户不应该知道的数据。可使用策略模式以避免暴露复杂的、与算法相关的数据结构。  </li><li>一个类定义了多种行为, 并且这些行为在这个类的操作中以多个条件语句的形式出现。将相关的条件分支移入它们各自的Strategy类中以代替这些条件语句。  </li></ul><img src="/2017/02/18/23种设计模式的结构图/Strategy.png"><h1 id="Template-Method（模板方法）"><a href="#Template-Method（模板方法）" class="headerlink" title="Template Method（模板方法）"></a>Template Method（模板方法）</h1><p><strong>意图：</strong><br>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。TemplateMethod 使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。  </p><p><strong>适用性：</strong>  </p><ul><li>一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。  </li><li>各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。这是Opdyke 和Johnson所描述过的“重分解以一般化”的一个很好的例子[ OJ93 ]。首先识别现有代码中的不同之处，并且将不同之处分离为新的操作。最后，用一个调用这些新的操作的模板方法来替换这些不同的代码。  </li><li>控制子类扩展。模板方法只在特定点调用“hook ”操作（参见效果一节），这样就只允许在这些点进行扩展。  </li></ul><img src="/2017/02/18/23种设计模式的结构图/TemplateMethod.png"><h1 id="Visitor（访问者）"><a href="#Visitor（访问者）" class="headerlink" title="Visitor（访问者）"></a>Visitor（访问者）</h1><p><strong>意图：</strong><br>表示一个作用于某对象结构中的各元素的操作。它允许在不改变歌元素的类的前提下定义作用于这些元素的新操作。  </p><p><strong>适用性：</strong>  </p><ul><li>一个对象结构包含很多类对象，它们有不同的接口，而用户想对这些对象实施一些依赖于某具体类的操作。  </li><li>需要对一个对象结构种的对象进行很多不同的并且不相关的操作，而有想要避免这些操作“污染”这些对象的类。 Visitor 使得用户可以将相关的操作集中起来定义在一个类中。当该对象结构被很多应用共享时，用 Visitor 模式让每个应用仅包含需要用到的操作。  </li><li>定义对象结构的类很少改变，但经常需要在结构上定义新的操作。改变对象结构类需要重定义对所有访问者的接口，这可能需要很大的代价。如果对象结构类经常改变，那么可能还是在这些类中定义这些操作较好。  </li></ul><img src="/2017/02/18/23种设计模式的结构图/Visitor.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式分类&quot;&gt;&lt;a href=&quot;#设计模式分类&quot; class=&quot;headerlink&quot; title=&quot;设计模式分类&quot;&gt;&lt;/a&gt;设计模式分类&lt;/h1&gt;&lt;img src=&quot;/2017/02/18/23种设计模式的结构图/分类.png&quot;&gt;
&lt;h1 id=&quot;Abstra
      
    
    </summary>
    
      <category term="设计模式" scheme="https://liangyunfeng.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://liangyunfeng.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>面向对象设计原则</title>
    <link href="https://liangyunfeng.github.io/2017/01/14/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>https://liangyunfeng.github.io/2017/01/14/面向对象设计原则/</id>
    <published>2017-01-14T07:14:27.000Z</published>
    <updated>2018-05-21T13:25:53.588Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向对象设计原则概述"><a href="#面向对象设计原则概述" class="headerlink" title="面向对象设计原则概述"></a>面向对象设计原则概述</h1><p>对于面向对象软件系统的设计而言，在支持可维护性的同时，提高系统的可复用性是一个至关重要的问题，如何同时提高一个软件系统的可维护性和可复用性是面向对象设计需要解决的核心问题之一。在面向对象设计中，可维护性的复用是以设计原则为基础的。每一个原则都蕴含一些面向对象设计的思想，可以从不同的角度提升一个软件结构的设计水平。  </p><p>面向对象设计原则为支持可维护性复用而诞生，这些原则蕴含在很多设计模式中，它们是从许多设计方案中总结出的指导性原则。面向对象设计原则也是我们用于评价一个设计模式的使用效果的重要指标之一，在设计模式的学习中，大家经常会看到诸如“XXX模式符合XXX原则”、“XXX模式违反了XXX原则”这样的语句。  </p><p>最常见的7种面向对象设计原则如下表所示：</p><img src="/2017/01/14/面向对象设计原则/设计模式原则概述.png" title="设计模式原则概述"><h1 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h1><p>单一职责原则是最简单的面向对象设计原则，它用于控制类的粒度大小。单一职责原则定义如下：</p><blockquote><p>单一职责原则(Single Responsibility Principle, SRP)：一个类只负责一个功能领域中的相应职责，或者可以定义为：就一个类而言，应该只有一个引起它变化的原因。</p></blockquote><p>单一职责原则告诉我们：一个类不能太“累”！在软件系统中，一个类（大到模块，小到方法）承担的职责越多，它被复用的可能性就越小，而且一个类承担的职责过多，就相当于将这些职责耦合在一起，当其中一个职责变化时，可能会影响其他职责的运作，因此要将这些职责进行分离，将不同的职责封装在不同的类中，即将不同的变化原因封装在不同的类中，如果多个职责总是同时发生改变则可将它们封装在同一类中。  </p><p>单一职责原则是实现高内聚、低耦合的指导方针，它是最简单但又最难运用的原则，需要设计人员发现类的不同职责并将其分离，而发现类的多重职责需要设计人员具有较强的分析设计能力和相关实践经验。</p><h1 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h1><p>开闭原则是面向对象的可复用设计的第一块基石，它是最重要的面向对象设计原则。开闭原则由Bertrand  Meyer于1988年提出，其定义如下：</p><blockquote><p>开闭原则(Open-Closed Principle, OCP)：一个软件实体应当对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展。</p></blockquote><p>在开闭原则的定义中，软件实体可以指一个软件模块、一个由多个类组成的局部结构或一个独立的类。  </p><p>任何软件都需要面临一个很重要的问题，即它们的需求会随时间的推移而发生变化。当软件系统需要面对新的需求时，我们应该尽量保证系统的设计框架是稳定的。如果一个软件设计符合开闭原则，那么可以非常方便地对系统进行扩展，而且在扩展时无须修改现有代码，使得软件系统在拥有适应性和灵活性的同时具备较好的稳定性和延续性。随着软件规模越来越大，软件寿命越来越长，软件维护成本越来越高，设计满足开闭原则的软件系统也变得越来越重要。  </p><p>为了满足开闭原则，需要对系统进行抽象化设计，抽象化是开闭原则的关键。在Java、C#等编程语言中，可以为系统定义一个相对稳定的抽象层，而将不同的实现行为移至具体的实现层中完成。在很多面向对象编程语言中都提供了接口、抽象类等机制，可以通过它们定义系统的抽象层，再通过具体类来进行扩展。如果需要修改系统的行为，无须对抽象层进行任何改动，只需要增加新的具体类来实现新的业务功能即可，实现在不修改已有代码的基础上扩展系统的功能，达到开闭原则的要求。</p><h1 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h1><p>里氏代换原则由2008年图灵奖得主、美国第一位计算机科学女博士Barbara Liskov教授和卡内基·梅隆大学Jeannette Wing教授于1994年提出。其严格表述如下：如果对每一个类型为S的对象o1，都有类型为T的对象o2，使得以T定义的所有程序P在所有的对象o1代换o2时，程序P的行为没有变化，那么类型S是类型T的子类型。这个定义比较拗口且难以理解，因此我们一般使用它的另一个通俗版定义：</p><blockquote><p>里氏代换原则(Liskov Substitution Principle, LSP)：所有引用基类（父类）的地方必须能透明地使用其子类的对象。</p></blockquote><p>里氏代换原则告诉我们，在软件中将一个基类对象替换成它的子类对象，程序将不会产生任何错误和异常，反过来则不成立，如果一个软件实体使用的是一个子类对象的话，那么它不一定能够使用基类对象。例如：我喜欢动物，那我一定喜欢狗，因为狗是动物的子类；但是我喜欢狗，不能据此断定我喜欢动物，因为我并不喜欢老鼠，虽然它也是动物。  </p><p>例如有两个类，一个类为BaseClass，另一个是SubClass类，并且SubClass类是BaseClass类的子类，那么一个方法如果可以接受一个BaseClass类型的基类对象base的话，如：method1(base)，那么它必然可以接受一个BaseClass类型的子类对象sub，method1(sub)能够正常运行。反过来的代换不成立，如一个方法method2接受BaseClass类型的子类对象sub为参数：method2(sub)，那么一般而言不可以有method2(base)，除非是重载方法。  </p><p>里氏代换原则是实现开闭原则的重要方式之一，由于使用基类对象的地方都可以使用子类对象，因此在程序中尽量使用基类类型来对对象进行定义，而在运行时再确定其子类类型，用子类对象来替换父类对象。  </p><p>在使用里氏代换原则时需要注意如下几个问题：  </p><ol><li><p>子类的所有方法必须在父类中声明，或子类必须实现父类中声明的所有方法。根据里氏代换原则，为了保证系统的扩展性，在程序中通常使用父类来进行定义，如果一个方法只存在子类中，在父类中不提供相应的声明，则无法在以父类定义的对象中使用该方法。  </p></li><li><p>我们在运用里氏代换原则时，尽量把父类设计为抽象类或者接口，让子类继承父类或实现父接口，并实现在父类中声明的方法，运行时，子类实例替换父类实例，我们可以很方便地扩展系统的功能，同时无须修改原有子类的代码，增加新的功能可以通过增加一个新的子类来实现。里氏代换原则是开闭原则的具体实现手段之一。  </p></li><li><p>Java语言中，在编译阶段，Java编译器会检查一个程序是否符合里氏代换原则，这是一个与实现无关的、纯语法意义上的检查，但Java编译器的检查是有局限的。</p></li></ol><h1 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h1><p>如果说开闭原则是面向对象设计的目标的话，那么依赖倒转原则就是面向对象设计的主要实现机制之一，它是系统抽象化的具体实现。依赖倒转原则是Robert C. Martin在1996年为“C++Reporter”所写的专栏Engineering Notebook的第三篇，后来加入到他在2002年出版的经典著作“Agile Software Development, Principles, Patterns, and Practices”一书中。依赖倒转原则定义如下：  </p><blockquote><p>依赖倒转原则(Dependency Inversion Principle, DIP)：抽象不应该依赖于细节，细节应当依赖于抽象。换言之，要针对接口编程，而不是针对实现编程。</p></blockquote><p>依赖倒转原则要求我们在程序代码中传递参数时或在关联关系中，尽量引用层次高的抽象层类，即使用接口和抽象类进行变量类型声明、参数类型声明、方法返回类型声明，以及数据类型的转换等，而不要用具体类来做这些事情。为了确保该原则的应用，一个具体类应当只实现接口或抽象类中声明过的方法，而不要给出多余的方法，否则将无法调用到在子类中增加的新方法。  </p><p>在引入抽象层后，系统将具有很好的灵活性，在程序中尽量使用抽象层进行编程，而将具体类写在配置文件中，这样一来，如果系统行为发生变化，只需要对抽象层进行扩展，并修改配置文件，而无须修改原有系统的源代码，在不修改的情况下来扩展系统的功能，满足开闭原则的要求。  </p><p>在实现依赖倒转原则时，我们需要针对抽象层编程，而将具体类的对象通过依赖注入(DependencyInjection, DI)的方式注入到其他对象中，依赖注入是指当一个对象要与其他对象发生依赖关系时，通过抽象来注入所依赖的对象。常用的注入方式有三种，分别是：构造注入，设值注入（Setter注入）和接口注入。构造注入是指通过构造函数来传入具体类的对象，设值注入是指通过Setter方法来传入具体类的对象，而接口注入是指通过在接口中声明的业务方法来传入具体类的对象。这些方法在定义时使用的是抽象类型，在运行时再传入具体类型的对象，由子类对象来覆盖父类对象。  </p><blockquote><p>扩展<br>  软件工程大师Martin Fowler在其文章Inversion of Control Containers and the Dependency Injection pattern中对依赖注入进行了深入的分析，参考链接：<br>  <a href="http://martinfowler.com/articles/injection.html" target="_blank" rel="noopener">http://martinfowler.com/articles/injection.html</a></p></blockquote><h1 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h1><p>接口隔离原则定义如下：</p><blockquote><p>接口隔离原则(Interface Segregation Principle, ISP)：使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。</p></blockquote><p>根据接口隔离原则，当一个接口太大时，我们需要将它分割成一些更细小的接口，使用该接口的客户端仅需知道与之相关的方法即可。每一个接口应该承担一种相对独立的角色，不干不该干的事，该干的事都要干。这里的“接口”往往有两种不同的含义：一种是指一个类型所具有的方法特征的集合，仅仅是一种逻辑上的抽象；另外一种是指某种语言具体的“接口”定义，有严格的定义和结构，比如Java语言中的interface。对于这两种不同的含义，ISP的表达方式以及含义都有所不同：  </p><ol><li><p>当把“接口”理解成一个类型所提供的所有方法特征的集合的时候，这就是一种逻辑上的概念，接口的划分将直接带来类型的划分。可以把接口理解成角色，一个接口只能代表一个角色，每个角色都有它特定的一个接口，此时，这个原则可以叫做“角色隔离原则”。  </p></li><li><p>如果把“接口”理解成狭义的特定语言的接口，那么ISP表达的意思是指接口仅仅提供客户端需要的行为，客户端不需要的行为则隐藏起来，应当为客户端提供尽可能小的单独的接口，而不要提供大的总接口。在面向对象编程语言中，实现一个接口就需要实现该接口中定义的所有方法，因此大的总接口使用起来不一定很方便，为了使接口的职责单一，需要将大接口中的方法根据其职责不同分别放在不同的小接口中，以确保每个接口使用起来都较为方便，并都承担某一单一角色。接口应该尽量细化，同时接口中的方法应该尽量少，每个接口中只包含一个客户端（如子模块或业务逻辑类）所需的方法即可，这种机制也称为“定制服务”，即为不同的客户端提供宽窄不同的接口。</p></li></ol><h1 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h1><p>合成复用原则又称为组合/聚合复用原则(Composition/Aggregate Reuse Principle, CARP)，其定义如下：</p><blockquote><p>合成复用原则(Composite Reuse Principle, CRP)：尽量使用对象组合，而不是继承来达到复用的目的。</p></blockquote><p>合成复用原则就是在一个新的对象里通过关联关系（包括组合关系和聚合关系）来使用一些已有的对象，使之成为新对象的一部分；新对象通过委派调用已有对象的方法达到复用功能的目的。简言之：复用时要尽量使用组合/聚合关系（关联关系），少用继承。  </p><p>在面向对象设计中，可以通过两种方法在不同的环境中复用已有的设计和实现，即通过组合/聚合关系或通过继承，但首先应该考虑使用组合/聚合，组合/聚合可以使系统更加灵活，降低类与类之间的耦合度，一个类的变化对其他类造成的影响相对较少；其次才考虑继承，在使用继承时，需要严格遵循里氏代换原则，有效使用继承会有助于对问题的理解，降低复杂度，而滥用继承反而会增加系统构建和维护的难度以及系统的复杂度，因此需要慎重使用继承复用。  </p><p>通过继承来进行复用的主要问题在于继承复用会破坏系统的封装性，因为继承会将基类的实现细节暴露给子类，由于基类的内部细节通常对子类来说是可见的，所以这种复用又称“白箱”复用，如果基类发生改变，那么子类的实现也不得不发生改变；从基类继承而来的实现是静态的，不可能在运行时发生改变，没有足够的灵活性；而且继承只能在有限的环境中使用（如类没有声明为不能被继承）。  </p><blockquote><p>扩展<br>  对于继承的深入理解，大家可以参考《软件架构设计》一书作者温昱先生的文章——《见山只是山见水只是水——提升对继承的认识》。</p></blockquote><p>由于组合或聚合关系可以将已有的对象（也可称为成员对象）纳入到新对象中，使之成为新对象的一部分，因此新对象可以调用已有对象的功能，这样做可以使得成员对象的内部实现细节对于新对象不可见，所以这种复用又称为“黑箱”复用，相对继承关系而言，其耦合度相对较低，成员对象的变化对新对象的影响不大，可以在新对象中根据实际需要有选择性地调用成员对象的操作；合成复用可以在运行时动态进行，新对象可以动态地引用与成员对象类型相同的其他对象。  </p><p>一般而言，如果两个类之间是“Has-A”的关系应使用组合或聚合，如果是“Is-A”关系可使用继承。”Is-A”是严格的分类学意义上的定义，意思是一个类是另一个类的”一种”；而”Has-A”则不同，它表示某一个角色具有某一项责任。</p><h1 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h1><p>迪米特法则来自于1987年美国东北大学(Northeastern University)一个名为“Demeter”的研究项目。迪米特法则又称为最少知识原则(LeastKnowledge Principle, LKP)，其定义如下：</p><blockquote><p>迪米特法则(Law of Demeter, LoD)：一个软件实体应当尽可能少地与其他实体发生相互作用。</p></blockquote><p>如果一个系统符合迪米特法则，那么当其中某一个模块发生修改时，就会尽量少地影响其他模块，扩展会相对容易，这是对软件实体之间通信的限制，迪米特法则要求限制软件实体之间通信的宽度和深度。迪米特法则可降低系统的耦合度，使类与类之间保持松散的耦合关系。  </p><p>迪米特法则还有几种定义形式，包括：不要和“陌生人”说话、只与你的直接朋友通信等，在迪米特法则中，对于一个对象，其朋友包括以下几类：  </p><ol><li>当前对象本身(this)；  </li><li>以参数形式传入到当前对象方法中的对象；  </li><li>当前对象的成员对象；  </li><li>如果当前对象的成员对象是一个集合，那么集合中的元素也都是朋友；  </li><li>当前对象所创建的对象。  </li></ol><p>任何一个对象，如果满足上面的条件之一，就是当前对象的“朋友”，否则就是“陌生人”。在应用迪米特法则时，一个对象只能与直接朋友发生交互，不要与“陌生人”发生直接交互，这样做可以降低系统的耦合度，一个对象的改变不会给太多其他对象带来影响。  </p><p>迪米特法则要求我们在设计系统时，应该尽量减少对象之间的交互，如果两个对象之间不必彼此直接通信，那么这两个对象就不应当发生任何直接的相互作用，如果其中的一个对象需要调用另一个对象的某一个方法的话，可以通过第三者转发这个调用。简言之，就是通过引入一个合理的第三者来降低现有对象之间的耦合度。  </p><p>在将迪米特法则运用到系统设计中时，要注意下面的几点：在类的划分上，应当尽量创建松耦合的类，类之间的耦合度越低，就越有利于复用，一个处在松耦合中的类一旦被修改，不会对关联的类造成太大波及；在类的结构设计上，每一个类都应当尽量降低其成员变量和成员函数的访问权限；在类的设计上，只要有可能，一个类型应当设计成不变类；在对其他类的引用上，一个对象对其他对象的引用应当降到最低。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;面向对象设计原则概述&quot;&gt;&lt;a href=&quot;#面向对象设计原则概述&quot; class=&quot;headerlink&quot; title=&quot;面向对象设计原则概述&quot;&gt;&lt;/a&gt;面向对象设计原则概述&lt;/h1&gt;&lt;p&gt;对于面向对象软件系统的设计而言，在支持可维护性的同时，提高系统的可复用性是一
      
    
    </summary>
    
      <category term="设计模式" scheme="https://liangyunfeng.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://liangyunfeng.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>状态栏上闹钟图标显示过程简介</title>
    <link href="https://liangyunfeng.github.io/2016/03/21/%E7%8A%B6%E6%80%81%E6%A0%8F%E4%B8%8A%E9%97%B9%E9%92%9F%E5%9B%BE%E6%A0%87%E6%98%BE%E7%A4%BA%E8%BF%87%E7%A8%8B%E7%AE%80%E4%BB%8B/"/>
    <id>https://liangyunfeng.github.io/2016/03/21/状态栏上闹钟图标显示过程简介/</id>
    <published>2016-03-21T12:10:26.000Z</published>
    <updated>2018-05-21T12:32:00.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-状态栏上闹钟图标显示过程简介"><a href="#1-状态栏上闹钟图标显示过程简介" class="headerlink" title="1. 状态栏上闹钟图标显示过程简介"></a>1. 状态栏上闹钟图标显示过程简介</h1><p>闹钟App设置闹钟时，都是通过AlarmManager，即AlarmManagerService服务来实现的，<br>每次创建或者更新闹钟时，都会调用AlarmManager.setExact()来向AlarmManagerService服务设置闹钟响的时间；</p><p>AlarmManagerService服务通过native函数set()来设置内核中闹钟，并且发送广播AlarmManager.ACTION_NEXT_ALARM_CLOCK_CHANGED来通知SystemUI进行系统图标的显示，同时会循环调用native函数waitForAlarm()监听到Alarm变化，当监听到有Alarm时间到了，也会发送AlarmManager.ACTION_NEXT_ALARM_CLOCK_CHANGED广播出去；</p><p>SystemUI的PhoneStatusBarPolicy.mIntentReceiver会监听这个广播，当接收到AlarmManager.ACTION_NEXT_ALARM_CLOCK_CHANGED广播后，调用StatusBarManagerService服务来设置状态上显示的system icon和icon visibility：</p><pre><code>mService.setIcon(SLOT_ALARM_CLOCK, R.drawable.stat_sys_alarm, 0, null);mService.setIconVisibility(SLOT_ALARM_CLOCK, mCurrentUserSetup &amp;&amp; hasAlarm);</code></pre><p>在StatusBarManagerService.setIcon()中，服务会通过IStatusBar mBar来处理icon的显示情况，<br>mBar就是SystemUI中BaseStatusBar的IStatusBar.Stub子类CommandQueue类mCommandQueue对象，通过注册到StatusBarManagerService服务中的，<br>BaseStatusBar创建mCommandQueue对象时，还把实现了CommandQueue.Callbacks接口的BaseStatusBar对象也传递过去，<br>CommandQueue mCommandQueue = new CommandQueue(this,mIconList);<br>这样StatusBarManagerService服务就可以通过SystemUI中的IStatusBar.Stub子类CommandQueue类mCommandQueue对象来调用SystemUI来处理icon显示</p><p>注意：因为notification icon和system icon是状态栏上左右两边的不同的图标，左边是通知图标(notification icon)，右边的是系统图标(system icon); system icon显示是不受notification影响的，所以调用NotificationManager发出通知是不会在system icon区域显示图标的，只会在notification icon区域显示，所以这里实现闹钟图标显示时是Alarm通过AlarmManagerService发广播给SystemUI的PhoneStatusBarPolicy，SystemUI再调用StatusBarManagerService服务添加icon，StatusBarManagerService服务再通过SystemUI的CommandQueue对象来实现在SystemUI中显示icon的。</p><h1 id="2-状态栏上闹钟图标显示过程的时序图"><a href="#2-状态栏上闹钟图标显示过程的时序图" class="headerlink" title="2. 状态栏上闹钟图标显示过程的时序图"></a>2. 状态栏上闹钟图标显示过程的时序图</h1><img src="/2016/03/21/状态栏上闹钟图标显示过程简介/时序图.jpg" title="时序图"><h1 id="3-状态栏上闹钟图标显示过程的实现代码"><a href="#3-状态栏上闹钟图标显示过程的实现代码" class="headerlink" title="3. 状态栏上闹钟图标显示过程的实现代码"></a>3. 状态栏上闹钟图标显示过程的实现代码</h1><h3 id="1-闹钟App中调用设置闹钟："><a href="#1-闹钟App中调用设置闹钟：" class="headerlink" title="1).闹钟App中调用设置闹钟："></a>1).闹钟App中调用设置闹钟：</h3><blockquote><p>AlarmProvider.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">enableNextAlert</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">AlarmManager am = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);</span><br><span class="line">am.setExact(AlarmManager.RTC_WAKEUP, item.alarmAlertTime, mPendingIntent);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-AlarmManager设置闹钟："><a href="#2-AlarmManager设置闹钟：" class="headerlink" title="2).AlarmManager设置闹钟："></a>2).AlarmManager设置闹钟：</h3><p>在闹钟App中调用AlarmManager的setExact()方法后，这里AlarmManager就会通过IAlarmManager.Stub和AlarmManagerServie通信Binder通信。</p><blockquote><p>AlarmManager.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExact</span><span class="params">(<span class="keyword">int</span> type, <span class="keyword">long</span> triggerAtMillis, PendingIntent operation)</span> </span>&#123;</span><br><span class="line">    setImpl(type, triggerAtMillis, WINDOW_EXACT, <span class="number">0</span>, <span class="number">0</span>, operation, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setImpl</span><span class="params">(<span class="keyword">int</span> type, <span class="keyword">long</span> triggerAtMillis, <span class="keyword">long</span> windowMillis, <span class="keyword">long</span> intervalMillis,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> flags, PendingIntent operation, WorkSource workSource, AlarmClockInfo alarmClock)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mService.set(type, triggerAtMillis, windowMillis, intervalMillis, flags, operation,</span><br><span class="line">                workSource, alarmClock);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-AlarmManagerService设置闹钟："><a href="#3-AlarmManagerService设置闹钟：" class="headerlink" title="3).AlarmManagerService设置闹钟："></a>3).AlarmManagerService设置闹钟：</h3><p>更新SystemUI状态栏中系统图标闹钟图标的广播是从AlarmManagerService这个服务中发出来了，这样可以所有App中设置闹钟的逻辑都会集中在这个服务中来处理。</p><blockquote><p>AlarmManagerService.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> IBinder mService = <span class="keyword">new</span> IAlarmManager.Stub() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String callingPackage,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> type, <span class="keyword">long</span> triggerAtTime, <span class="keyword">long</span> windowLength, <span class="keyword">long</span> interval, <span class="keyword">int</span> flags,</span></span></span><br><span class="line"><span class="function"><span class="params">            PendingIntent operation, IAlarmListener directReceiver, String listenerTag,</span></span></span><br><span class="line"><span class="function"><span class="params">            WorkSource workSource, AlarmManager.AlarmClockInfo alarmClock)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">        setImpl(type, triggerAtTime, windowLength, interval, operation, directReceiver,</span><br><span class="line">                listenerTag, flags, workSource, alarmClock, callingUid, callingPackage);</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setImpl</span><span class="params">(<span class="keyword">int</span> type, <span class="keyword">long</span> triggerAtTime, <span class="keyword">long</span> windowLength, <span class="keyword">long</span> interval,</span></span></span><br><span class="line"><span class="function"><span class="params">        PendingIntent operation, IAlarmListener directReceiver, String listenerTag,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> flags, WorkSource workSource, AlarmManager.AlarmClockInfo alarmClock,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> callingUid, String callingPackage)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="comment">/* AppCore: Restrict 500 alarms for each App &#125; */</span></span><br><span class="line">    setImplLocked(type, triggerAtTime, triggerElapsed, windowLength, maxElapsed,</span><br><span class="line">            interval, operation, directReceiver, listenerTag, flags, <span class="keyword">true</span>, workSource,</span><br><span class="line">            alarmClock, callingUid, callingPackage);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Alarm <span class="title">setImplLocked</span><span class="params">(<span class="keyword">int</span> type, <span class="keyword">long</span> when, <span class="keyword">long</span> whenElapsed, <span class="keyword">long</span> windowLength,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">long</span> maxWhen, <span class="keyword">long</span> interval, PendingIntent operation, IAlarmListener directReceiver,</span></span></span><br><span class="line"><span class="function"><span class="params">        String listenerTag, <span class="keyword">int</span> flags, <span class="keyword">boolean</span> doValidate, WorkSource workSource,</span></span></span><br><span class="line"><span class="function"><span class="params">        AlarmManager.AlarmClockInfo alarmClock, <span class="keyword">int</span> callingUid, String callingPackage)</span> </span>&#123;</span><br><span class="line">    Alarm a = <span class="keyword">new</span> Alarm(type, when, whenElapsed, windowLength, maxWhen, interval,</span><br><span class="line">            operation, directReceiver, listenerTag, workSource, flags, alarmClock,</span><br><span class="line">            callingUid, callingPackage);</span><br><span class="line">...</span><br><span class="line">setImplLocked(a, <span class="keyword">false</span>, doValidate);</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setImplLocked</span><span class="params">(Alarm a, <span class="keyword">boolean</span> rebatching, <span class="keyword">boolean</span> doValidate)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">    rescheduleKernelAlarmsLocked();<span class="comment">//调用内核的native方法设置闹钟</span></span><br><span class="line">    updateNextAlarmClockLocked();<span class="comment">//更新状态栏中显示的系统图标状态</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateNextAlarmClockLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">    updateNextAlarmInfoForUserLocked(userId, newAlarm);<span class="comment">//更新指定userId状态栏中显示的系统图标状态</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateNextAlarmInfoForUserLocked</span><span class="params">(<span class="keyword">int</span> userId,</span></span></span><br><span class="line"><span class="function"><span class="params">        AlarmManager.AlarmClockInfo alarmClock)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">    mHandler.removeMessages(AlarmHandler.SEND_NEXT_ALARM_CLOCK_CHANGED);</span><br><span class="line">    mHandler.sendEmptyMessage(AlarmHandler.SEND_NEXT_ALARM_CLOCK_CHANGED);<span class="comment">//通过UI线程去发送广播</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">AlarmHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">        <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">            <span class="keyword">case</span> SEND_NEXT_ALARM_CLOCK_CHANGED:</span><br><span class="line">                sendNextAlarmClockChanged();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendNextAlarmClockChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">....</span><br><span class="line">    getContext().sendBroadcastAsUser(NEXT_ALARM_CLOCK_CHANGED_INTENT,</span><br><span class="line">            <span class="keyword">new</span> UserHandle(userId));<span class="comment">//发送广播去显示状态栏中的系统图标</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Intent NEXT_ALARM_CLOCK_CHANGED_INTENT =</span><br><span class="line">        <span class="keyword">new</span> Intent(AlarmManager.ACTION_NEXT_ALARM_CLOCK_CHANGED)</span><br><span class="line">                .addFlags(Intent.FLAG_RECEIVER_REPLACE_PENDING);</span><br></pre></td></tr></table></figure><p>以下是如何调用内核来设置闹钟和闹钟时间到后的处理逻辑，可以参考如下，不过这里我们只是跟踪状态栏上系统图标中闹钟图标的显示过程，所以就不深入跟踪了，有兴趣的同事可以自己研究。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rescheduleKernelAlarmsLocked</span><span class="params">()</span> </span>&#123;<span class="comment">//调用内核的native方法设置闹钟</span></span><br><span class="line">...</span><br><span class="line">    setLocked(ELAPSED_REALTIME, nextNonWakeup);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setLocked</span><span class="params">(<span class="keyword">int</span> type, <span class="keyword">long</span> when)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">    set(mNativeData, type, alarmSeconds, alarmNanoseconds);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">long</span> nativeData, <span class="keyword">int</span> type, <span class="keyword">long</span> seconds, <span class="keyword">long</span> nanoseconds)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">AlarmThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AlarmThread</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"AlarmManager"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">...</span><br><span class="line">            <span class="keyword">int</span> result = waitForAlarm(mNativeData);<span class="comment">//循环调用阻塞函数waitForAlarm()来监听到Alarm变化</span></span><br><span class="line"><span class="keyword">boolean</span> hasWakeup = triggerAlarmsLocked(triggerList, nowELAPSED, nowRTC);</span><br><span class="line"><span class="keyword">if</span> (!hasWakeup &amp;&amp; checkAllowNonWakeupDelayLocked(nowELAPSED)) &#123;</span><br><span class="line">rescheduleKernelAlarmsLocked();<span class="comment">//调用内核的native方法设置闹钟</span></span><br><span class="line">updateNextAlarmClockLocked();<span class="comment">//更新状态栏中显示的系统图标状态</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-SystemUI接收广播："><a href="#4-SystemUI接收广播：" class="headerlink" title="4). SystemUI接收广播："></a>4). SystemUI接收广播：</h3><blockquote><p>PhoneStatusBarPolicy.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> StatusbarManager mService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> BroadcastReceiver mIntentReceiver = <span class="keyword">new</span> BroadcastReceiver() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        String action = intent.getAction();</span><br><span class="line">        <span class="keyword">if</span> (action.equals(AlarmManager.ACTION_NEXT_ALARM_CLOCK_CHANGED)) &#123;</span><br><span class="line">            updateAlarm();</span><br><span class="line">        &#125;</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PhoneStatusBarPolicy</span><span class="params">(Context context, StatusBarIconController iconController,</span></span></span><br><span class="line"><span class="function"><span class="params">        CastController cast, HotspotController hotspot, UserInfoController userInfoController,</span></span></span><br><span class="line"><span class="function"><span class="params">        BluetoothController bluetooth, RotationLockController rotationLockController,</span></span></span><br><span class="line"><span class="function"><span class="params">        DataSaverController dataSaver)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// listen for broadcasts</span></span><br><span class="line">    IntentFilter filter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">    filter.addAction(AlarmManager.ACTION_NEXT_ALARM_CLOCK_CHANGED);</span><br><span class="line">    filter.addAction(AudioManager.RINGER_MODE_CHANGED_ACTION);</span><br><span class="line">    filter.addAction(AudioManager.INTERNAL_RINGER_MODE_CHANGED_ACTION);</span><br><span class="line">    filter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);</span><br><span class="line">    filter.addAction(TelecomManager.ACTION_CURRENT_TTY_MODE_CHANGED);</span><br><span class="line">    mContext.registerReceiver(mIntentReceiver, filter, <span class="keyword">null</span>, mHandler);</span><br><span class="line">...</span><br><span class="line">    <span class="comment">// Alarm clock</span></span><br><span class="line">    mService.setIcon(SLOT_ALARM_CLOCK, R.drawable.stat_sys_alarm, <span class="number">0</span>, <span class="keyword">null</span>);</span><br><span class="line">    mService.setIconVisibility(SLOT_ALARM_CLOCK, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateAlarm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> AlarmClockInfo alarm = mAlarmManager.getNextAlarmClock(UserHandle.USER_CURRENT);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> hasAlarm = alarm != <span class="keyword">null</span> &amp;&amp; alarm.getTriggerTime() &gt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> zenNone = mZen == Global.ZEN_MODE_NO_INTERRUPTIONS;</span><br><span class="line">    <span class="keyword">if</span> (mCurrentUserSetup &amp;&amp; hasAlarm) &#123;</span><br><span class="line"><span class="comment">//通过StatusbarManagerService去更新系统图标</span></span><br><span class="line">        mService.setIcon(SLOT_ALARM_CLOCK, R.drawable.stat_sys_alarm, <span class="number">0</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//通过StatusbarManagerService去显示系统图标</span></span><br><span class="line">    mService.setIconVisibility(SLOT_ALARM_CLOCK, mCurrentUserSetup &amp;&amp; hasAlarm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-StatusBarManagerService调用SystemUI的通信对象来添加系统图标："><a href="#5-StatusBarManagerService调用SystemUI的通信对象来添加系统图标：" class="headerlink" title="5). StatusBarManagerService调用SystemUI的通信对象来添加系统图标："></a>5). StatusBarManagerService调用SystemUI的通信对象来添加系统图标：</h3><blockquote><p>StatusBarManagerService.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> IStatusBar mBar;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerStatusBar</span><span class="params">(IStatusBar bar, StatusBarIconList iconList,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> switches[], List&lt;IBinder&gt; binders)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">    mBar = bar;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIcon</span><span class="params">(String slot, String iconPackage, <span class="keyword">int</span> iconId, <span class="keyword">int</span> iconLevel,</span></span></span><br><span class="line"><span class="function"><span class="params">        String contentDescription)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = mIcons.getSlotIndex(slot);</span><br><span class="line">    StatusBarIcon icon = <span class="keyword">new</span> StatusBarIcon(iconPackage, UserHandle.OWNER, iconId,</span><br><span class="line">            iconLevel, <span class="number">0</span>,</span><br><span class="line">            contentDescription);</span><br><span class="line">    mIcons.setIcon(index, icon);</span><br><span class="line">    <span class="keyword">if</span> (mBar != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mBar.setIcon(index, icon);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIconVisibility</span><span class="params">(String slot, <span class="keyword">boolean</span> visible)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = mIcons.getSlotIndex(slot);</span><br><span class="line">    StatusBarIcon icon = mIcons.getIcon(index);</span><br><span class="line">    <span class="keyword">if</span> (icon.visible != visible) &#123;</span><br><span class="line">        icon.visible = visible;</span><br><span class="line">            <span class="keyword">if</span> (mBar != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    mBar.setIcon(index, icon);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的IStatusBar其实就是SystemUI中的CommandQueue类，它是IStatusBar.Stub的子类，它是在BaseStatusBar的start()方法中通过获取StatusBarManagerService服务对象，调用服务对象的registerStatusBar(IStatusBar bar, StatusBarIconList iconList,int switches[], List<ibinder> binders)方法把CommandQueue对象注册到StatusBarManagerService服务对象中来方便StatusBarManagerService服务和SystemUI进程之间进行通信的。BaseStatusBar中建立和StatusBarManagerService服务通信的代码如下：</ibinder></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> IStatusBarService mBarService;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">mCommandQueue = <span class="keyword">new</span> CommandQueue(<span class="keyword">this</span>, mIconList);</span><br><span class="line">    mBarService = IStatusBarService.Stub.asInterface(</span><br><span class="line">            ServiceManager.getService(Context.STATUS_BAR_SERVICE));</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mBarService.registerStatusBar(mCommandQueue, mIconList, switches, binders);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">        <span class="comment">// If the system process isn't there we're doomed anyway.</span></span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-SystemUI中CommandQueue通信接口："><a href="#6-SystemUI中CommandQueue通信接口：" class="headerlink" title="6). SystemUI中CommandQueue通信接口："></a>6). SystemUI中CommandQueue通信接口：</h3><blockquote><p>CommandQueue.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Callbacks mCallbacks;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CommandQueue</span><span class="params">(Callbacks callbacks, StatusBarIconList list)</span> </span>&#123;</span><br><span class="line">    mCallbacks = callbacks;<span class="comment">//mCallbacks是BaseStatusBar和PhoneStatusBar实现CommandQueue.Callbacks的接口对象</span></span><br><span class="line">    mList = list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIcon</span><span class="params">(<span class="keyword">int</span> index, StatusBarIcon icon)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mList) &#123;</span><br><span class="line">        <span class="keyword">int</span> what = MSG_ICON | index;</span><br><span class="line">        mHandler.removeMessages(what);</span><br><span class="line">        mHandler.obtainMessage(what, OP_SET_ICON, <span class="number">0</span>, icon.clone()).sendToTarget();<span class="comment">//统一发到handler中处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">H</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> what = msg.what &amp; MSG_MASK;</span><br><span class="line">        <span class="keyword">switch</span> (what) &#123;</span><br><span class="line">            <span class="keyword">case</span> MSG_ICON: &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> index = msg.what &amp; INDEX_MASK;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> viewIndex = mList.getViewIndex(index);</span><br><span class="line">                <span class="keyword">switch</span> (msg.arg1) &#123;</span><br><span class="line">                    <span class="keyword">case</span> OP_SET_ICON: &#123;</span><br><span class="line">                        StatusBarIcon icon = (StatusBarIcon)msg.obj;</span><br><span class="line">                        StatusBarIcon old = mList.getIcon(index);</span><br><span class="line">                        <span class="keyword">if</span> (old == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            mList.setIcon(index, icon);</span><br><span class="line"><span class="comment">//调用PhoneStatusBar.addIcon()方法来添加系统图标</span></span><br><span class="line">                            mCallbacks.addIcon(mList.getSlot(index), index, viewIndex, icon);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            mList.setIcon(index, icon);</span><br><span class="line"><span class="comment">//调用PhoneStatusBar.addIcon()方法来更新系统图标</span></span><br><span class="line">                            mCallbacks.updateIcon(mList.getSlot(index), index, viewIndex,</span><br><span class="line">                                    old, icon);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-SystemUI中PhoneStatusBar调用状态栏图标控制类来添加系统图标："><a href="#7-SystemUI中PhoneStatusBar调用状态栏图标控制类来添加系统图标：" class="headerlink" title="7). SystemUI中PhoneStatusBar调用状态栏图标控制类来添加系统图标："></a>7). SystemUI中PhoneStatusBar调用状态栏图标控制类来添加系统图标：</h3><blockquote><p>PhoneStatusBar.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">StatusBarIconController mIconController;<span class="comment">//状态栏图标控制类</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addIcon</span><span class="params">(String slot, <span class="keyword">int</span> index, <span class="keyword">int</span> viewIndex, StatusBarIcon icon)</span> </span>&#123;</span><br><span class="line">    mIconController.addSystemIcon(slot, index, viewIndex, icon);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-SystemUI中StatusBarIconController添加系统图标："><a href="#8-SystemUI中StatusBarIconController添加系统图标：" class="headerlink" title="8). SystemUI中StatusBarIconController添加系统图标："></a>8). SystemUI中StatusBarIconController添加系统图标：</h3><blockquote><p>StatusBarIconController.java &amp; StatusBarIconView.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//StatusBarIconController.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> LinearLayout mStatusIcons;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StatusBarIconController</span><span class="params">(Context context, View statusBar, View keyguardStatusBar,</span></span></span><br><span class="line"><span class="function"><span class="params">        PhoneStatusBar phoneStatusBar)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">    mStatusIcons = (LinearLayout) statusBar.findViewById(R.id.statusIcons);<span class="comment">//系统图标布局容器</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addSystemIcon</span><span class="params">(String slot, <span class="keyword">int</span> index, <span class="keyword">int</span> viewIndex, StatusBarIcon icon)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> blocked = mIconBlacklist.contains(slot);</span><br><span class="line">    StatusBarIconView view = <span class="keyword">new</span> StatusBarIconView(mContext, slot, <span class="keyword">null</span>, blocked, <span class="number">0</span>);</span><br><span class="line">    view.set(icon);</span><br><span class="line">    mStatusIcons.addView(view, viewIndex, <span class="keyword">new</span> LinearLayout.LayoutParams(</span><br><span class="line">            ViewGroup.LayoutParams.WRAP_CONTENT, mIconSize));<span class="comment">//把图标添加到布局容器中</span></span><br><span class="line">    view = <span class="keyword">new</span> StatusBarIconView(mContext, slot, <span class="keyword">null</span>, blocked, <span class="number">0</span>);</span><br><span class="line">    view.set(icon);</span><br><span class="line">    mStatusIconsKeyguard.addView(view, viewIndex, <span class="keyword">new</span> LinearLayout.LayoutParams(</span><br><span class="line">            ViewGroup.LayoutParams.WRAP_CONTENT, mIconSize));</span><br><span class="line">    applyIconTint();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//StatusBarIconView.java</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(StatusBarIcon icon)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!iconEquals) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!updateDrawable(<span class="keyword">false</span> <span class="comment">/* no clear */</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!numberEquals) &#123;</span><br><span class="line">        <span class="keyword">if</span> (icon.number &gt; <span class="number">0</span> &amp;&amp; getContext().getResources().getBoolean(</span><br><span class="line">                    R.bool.config_statusBarShowNumber)) &#123;</span><br><span class="line">            placeNumber();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mNumberBackground = <span class="keyword">null</span>;</span><br><span class="line">            mNumberText = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!visibilityEquals) &#123;</span><br><span class="line">        setVisibility(icon.visible &amp;&amp; !mBlocked ? VISIBLE : GONE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateDrawable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    updateDrawable(<span class="keyword">true</span> <span class="comment">/* with clear */</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">updateDrawable</span><span class="params">(<span class="keyword">boolean</span> withClear)</span> </span>&#123;</span><br><span class="line">    Drawable drawable = getIcon(mIcon);</span><br><span class="line">    setImageDrawable(drawable);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Drawable <span class="title">getIcon</span><span class="params">(StatusBarIcon icon)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getIcon(getContext(), icon);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Drawable <span class="title">getIcon</span><span class="params">(Context context, StatusBarIcon icon)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> icon.icon.loadDrawableAsUser(context, userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h1><p>通过以上对状态栏中闹钟图标的显示过程，我们可以知道，状态栏右边的系统图标的显示，是可以由系统App控制来显示的，系统App可以通过获取StatusBarManagerService这个服务对象来设置状态栏中的系统图标。</p><p>代码实现如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SLOT_ALARM_CLOCK = <span class="string">"alarm_clock"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> StatusBarManager mService = (StatusBarManager) context.getSystemService(Context.STATUS_BAR_SERVICE);</span><br><span class="line">mService.setIcon(SLOT_ALARM_CLOCK, R.drawable.stat_sys_alarm, <span class="number">0</span>, <span class="keyword">null</span>);</span><br><span class="line">mService.setIconVisibility(SLOT_ALARM_CLOCK, mCurrentUserSetup &amp;&amp; hasAlarm);</span><br></pre></td></tr></table></figure><br>还要记得在AndroidManifest.xml文件中加入以下权限：</p><pre><code>&lt;uses-permission android:name=&quot;android.permission.STATUS_BAR_SERVICE&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.STATUS_BAR&quot; /&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-状态栏上闹钟图标显示过程简介&quot;&gt;&lt;a href=&quot;#1-状态栏上闹钟图标显示过程简介&quot; class=&quot;headerlink&quot; title=&quot;1. 状态栏上闹钟图标显示过程简介&quot;&gt;&lt;/a&gt;1. 状态栏上闹钟图标显示过程简介&lt;/h1&gt;&lt;p&gt;闹钟App设置闹钟时，都
      
    
    </summary>
    
      <category term="Android" scheme="https://liangyunfeng.github.io/categories/Android/"/>
    
      <category term="SystemUI" scheme="https://liangyunfeng.github.io/categories/Android/SystemUI/"/>
    
    
      <category term="Android" scheme="https://liangyunfeng.github.io/tags/Android/"/>
    
  </entry>
  
</feed>
